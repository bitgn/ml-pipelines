syntax="proto3";

import "vo.proto";




// PROJECT
message CreateProjectRequest{
    string name = 1;
    ProjectMetadataDelta meta = 2;

}


message GetProjectRequest{
    string name = 1;
}

message ProjectInfoResponse {
    bytes uid = 1;
    string name = 2;

    ApiError error = 100;

}


// JOB -----------------------------------
message CreateJobRequest{
    bytes project_uid = 1;
    string name = 2;

    JobMetadataDelta meta = 3;
}


message GetJobRequest {
    bytes project_uid = 1;
    string name = 2;
}

message JobInfoResponse {
    string name = 1;
    bytes uid = 2;

    string project_name = 3;
    bytes project_uid = 4;

    ApiError error = 100;
}



// JOB RUN --------------------------------------------------------------------



message StartJobRunRequest {
    bytes project_uid = 1;
    bytes job_uid = 2;


    string title = 3;
    repeated JobRunInput inputs = 4;
}


message JobRunInfoResponse {
    bytes uid = 1;
    bytes project_uid = 2;

    ApiError error = 100;
}

message LogJobRunRequest {
    bytes uid = 1;
    string details = 2;
    // optional title for the log
    string log_title = 3;
}



// returns OkResponse
message FailJobRunRequest {
    bytes uid = 1;
    string message = 2;
    string details = 3;

}


// returns OkResponse
message CompleteJobRunRequest {
    bytes uid = 1;
}


// SERVICE ---------------------------------------------------------------------


message CreateServiceRequest {
    bytes project_uid = 1;
    string name = 2;
    ServiceMetadataDelta meta = 3;
}

message GetServiceRequest {
    bytes project_uid = 1;
    string name = 2;

}

message ServiceInfoResponse {
    bytes uid = 1;
    bytes project_uid = 2;
    string name = 3;
    string project_name = 4;

    ApiError error = 100;
}

message AddServiceVersionRequest {
    bytes service_uid = 1;

    string title = 2;


    repeated ServiceVersionInput inputs = 3;
    repeated ServiceVersionOutput outputs = 4;
}

message AddServiceVersionResponse {
    bytes uid = 1;

    ApiError error = 100;
}




// DATASET ------------------------


// -> DatasetResponse
message GetDatasetRequest {
    bytes project_uid = 1;
    string name = 2;
}

message CreateDatasetRequest {
    bytes project_uid = 1;
    string name = 2;
    DatasetMetadataDelta meta = 3;
}


message DatasetInfoResponse {
    bytes uid = 1;
    bytes project_uid = 2;
    string name = 3;
    string project_name = 4;

    int64 update_timestamp = 9;
    string data_format = 10;
    string description = 11;


    string location_id = 12;

    string location_uri = 13;

    ApiError error = 100;
}





// DATASET VERSION -----------------
message GetLastDatasetVersionRequest {
    bytes project_uid = 1;
    bytes dataset_uid = 2;
}

message DatasetVersionResponse {
    bytes uid = 1;
    bool no_version = 2;

    ApiError error = 100;

}

// creates a new version
message DatasetChangeSet {
    bytes dataset_uid = 1;
    bytes parent_version_uid = 2;

    // items are added to the same location
    repeated DatasetItem items = 3;


    bool clean_slate = 4; // wipes the old version
    repeated string remove = 5; // names to remove

    // inputs to mark
    repeated DatasetVerInput inputs = 6;


    // inputs will be set by
}


message DatasetCommit {
    string title = 1;
    repeated DatasetChangeSet datasets = 2;
}



// commit multiple changes in one transaction
message CommitRequest {

    string title = 1;
    repeated DatasetChangeSet datasets = 7;

}


message CommitResponse {
    repeated bytes dataset_versions = 1;

    ApiError error = 100;
}





// MISC -----------------------------------------------------------------------



message StatRequest{}

message StatResponse{
    string version = 1;


    ApiError error = 100;
}











service Catalog {
    rpc CreateProject(CreateProjectRequest) returns (ProjectInfoResponse){}
    rpc GetProject(GetProjectRequest) returns (ProjectInfoResponse){}

    // SERVICES ------------

    rpc CreateService(CreateServiceRequest) returns (ServiceInfoResponse){}
    rpc GetService(GetServiceRequest) returns (ServiceInfoResponse){}

    rpc AddServiceVersion(AddServiceVersionRequest) returns(AddServiceVersionResponse){}

    // JOBS -----------------
    rpc CreateJob(CreateJobRequest) returns (JobInfoResponse){}
    rpc GetJob(GetJobRequest) returns (JobInfoResponse){}


    rpc StartJobRun(StartJobRunRequest) returns (JobRunInfoResponse){}

    rpc LogJobRun(LogJobRunRequest) returns (EmptyResponse){}
    rpc FailJobRun(FailJobRunRequest) returns (EmptyResponse){}


    rpc CompleteJobRun(CompleteJobRunRequest) returns (EmptyResponse){}

    rpc CreateDataset(CreateDatasetRequest) returns (DatasetInfoResponse){}
    rpc GetDataset(GetDatasetRequest) returns(DatasetInfoResponse){}
    rpc UpdateDataset(UpdateDatasetRequest) returns (EmptyResponse){}
    rpc GetLastDatasetVersion(GetLastDatasetVersionRequest) returns (DatasetVersionResponse){}


    rpc Commit(CommitRequest) returns (CommitResponse){}



    rpc Stat(StatRequest) returns (StatResponse){}

}



message UpdateDatasetRequest {
    // option 1
    bytes uid = 1;
    DatasetMetadataDelta meta = 2;
}


message ApiError {
    StatusCode code = 1;
    string message = 2;
    // For API matching and tests
    bytes subject_uid = 3;
    string subject_name = 4;
    string field_name = 5;

    repeated string details = 6;

    string project_name = 7;
    string project_uid = 8;
    string method_name = 9;
}

enum StatusCode {

    // codes in gRPC
    OK = 0;

    // The operation was cancelled, typically by the caller.
    CANCELLED = 1;

    // Unknown error.  For example, this error may be returned when
    // a `Status` value received from another address space belongs to
    // an error space that is not known in this address space.  Also
    // errors raised by APIs that do not return enough error information
    // may be converted to this error.
    UNKNOWN = 2;

    // The client specified an invalid argument.  Note that this differs
    // from `FAILED_PRECONDITION`.  `INVALID_ARGUMENT` indicates arguments
    // that are problematic regardless of the state of the system
    // (e.g., a malformed file name).
    //
    // HTTP Mapping: 400 Bad Request
    INVALID_ARGUMENT = 3;

    // The deadline expired before the operation could complete. For operations
    // that change the state of the system, this error may be returned
    // even if the operation has completed successfully.  For example, a
    // successful response from a server could have been delayed long
    // enough for the deadline to expire.
    DEADLINE_EXCEEDED = 4;


    NOT_FOUND = 5;

    // The entity that a client attempted to create (e.g., file or directory)
    // already exists.
    ALREADY_EXISTS = 6;

    // The caller does not have permission to execute the specified
    // operation. `PERMISSION_DENIED` must not be used for rejections
    // caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
    // instead for those errors). `PERMISSION_DENIED` must not be
    // used if the caller can not be identified (use `UNAUTHENTICATED`
    // instead for those errors). This error code does not imply the
    // request is valid or the requested entity exists or satisfies
    // other pre-conditions.
    PERMISSION_DENIED = 7;

    // The request does not have valid authentication credentials for the
    // operation.
    UNAUTHENTICATED = 16;

    // Some resource has been exhausted, perhaps a per-user quota, or
    // perhaps the entire file system is out of space.
    RESOURCE_EXHAUSTED = 8;

    // The operation was rejected because the system is not in a state
    // required for the operation's execution.  For example, the directory
    // to be deleted is non-empty, an rmdir operation is applied to
    // a non-directory, etc.
    //
    // Service implementors can use the following guidelines to decide
    // between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
    //  (a) Use `UNAVAILABLE` if the client can retry just the failing call.
    //  (b) Use `ABORTED` if the client should retry at a higher level
    //      (e.g., when a client-specified test-and-set fails, indicating the
    //      client should restart a read-modify-write sequence).
    //  (c) Use `FAILED_PRECONDITION` if the client should not retry until
    //      the system state has been explicitly fixed.  E.g., if an "rmdir"
    //      fails because the directory is non-empty, `FAILED_PRECONDITION`
    //      should be returned since the client should not retry unless
    //      the files are deleted from the directory.
    //
    // HTTP Mapping: 400 Bad Request
    FAILED_PRECONDITION = 9;

    // The operation was aborted, typically due to a concurrency issue such as
    // a sequencer check failure or transaction abort.
    ABORTED = 10;

    // The operation was attempted past the valid range.  E.g., seeking or
    // reading past end-of-file.
    OUT_OF_RANGE = 11;

    // The operation is not implemented or is not supported/enabled in this
    // service.
    //
    // HTTP Mapping: 501 Not Implemented
    UNIMPLEMENTED = 12;

    INTERNAL = 13;

    // The service is currently unavailable.  This is most likely a
    // transient condition, which can be corrected by retrying with
    // a backoff.
    UNAVAILABLE = 14;

    // Unrecoverable data loss or corruption.
    DATA_LOSS = 15;


    // OUR own errors


    // Bad entity name was supplied
    BAD_NAME = 100;


    NAME_TAKEN=101;


    VERSION_MISMATCH=102;

}







message EmptyResponse {
    ApiError error = 100;
}




