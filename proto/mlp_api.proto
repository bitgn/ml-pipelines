syntax="proto3";

import "vo.proto";


message CreateProjectRequest{
    string name = 1;
    ProjectMetadataDelta meta = 2;

}
message CreateProjectResponse{
    ApiError error = 1;
    bytes uid = 2;
}


message CreateDatasetResponse{
    ApiError error = 1;
    bytes uid = 2;
}

message StatRequest{}

message StatResponse{
    string version = 1;
}



message CreateJobRequest{
    bytes project_uid = 1;
    string name = 2;

    JobMetadataDelta meta = 3;
}

message CreateJobResponse{
    ApiError error = 1;
    bytes uid = 2;
}


message LookupProjectRequest{
    string name = 1;
}

message LookupProjectResponse{
    ApiError error = 1;
    bytes uid = 2;
}



service Catalog {
    rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse){}
    rpc CreateDataset(CreateDatasetRequest) returns (CreateDatasetResponse){}
    rpc UpdateDataset(UpdateDatasetRequest) returns (ApiResponse){}
    rpc CreateJob(CreateJobRequest) returns (CreateJobResponse){}
    rpc Stat(StatRequest) returns (StatResponse){}

    rpc LookupProject(LookupProjectRequest) returns (LookupProjectResponse){}

}

message ApiResponse{
    ApiError error = 1;
}

message CreateDatasetRequest {
    bytes project_uid = 1;

    string name = 2;


    DatasetMetadataDelta meta = 3;
}


message UpdateDatasetRequest {
    // option 1
    bytes uid = 1;
    DatasetMetadataDelta meta = 2;
}


message ApiError {
    StatusCode code = 1;
    string message = 2;
    // For API matching and tests
    bytes subject_uid = 3;
    string subject_name = 4;
    string field_name = 5;

    repeated string details = 6;
}

enum StatusCode {

    // codes in gRPC
    OK = 0;

    // The operation was cancelled, typically by the caller.
    CANCELLED = 1;

    // Unknown error.  For example, this error may be returned when
    // a `Status` value received from another address space belongs to
    // an error space that is not known in this address space.  Also
    // errors raised by APIs that do not return enough error information
    // may be converted to this error.
    UNKNOWN = 2;

    // The client specified an invalid argument.  Note that this differs
    // from `FAILED_PRECONDITION`.  `INVALID_ARGUMENT` indicates arguments
    // that are problematic regardless of the state of the system
    // (e.g., a malformed file name).
    //
    // HTTP Mapping: 400 Bad Request
    INVALID_ARGUMENT = 3;

    // The deadline expired before the operation could complete. For operations
    // that change the state of the system, this error may be returned
    // even if the operation has completed successfully.  For example, a
    // successful response from a server could have been delayed long
    // enough for the deadline to expire.
    DEADLINE_EXCEEDED = 4;


    NOT_FOUND = 5;

    // The entity that a client attempted to create (e.g., file or directory)
    // already exists.
    ALREADY_EXISTS = 6;

    // The caller does not have permission to execute the specified
    // operation. `PERMISSION_DENIED` must not be used for rejections
    // caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
    // instead for those errors). `PERMISSION_DENIED` must not be
    // used if the caller can not be identified (use `UNAUTHENTICATED`
    // instead for those errors). This error code does not imply the
    // request is valid or the requested entity exists or satisfies
    // other pre-conditions.
    PERMISSION_DENIED = 7;

    // The request does not have valid authentication credentials for the
    // operation.
    UNAUTHENTICATED = 16;

    // Some resource has been exhausted, perhaps a per-user quota, or
    // perhaps the entire file system is out of space.
    RESOURCE_EXHAUSTED = 8;

    // The operation was rejected because the system is not in a state
    // required for the operation's execution.  For example, the directory
    // to be deleted is non-empty, an rmdir operation is applied to
    // a non-directory, etc.
    //
    // Service implementors can use the following guidelines to decide
    // between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
    //  (a) Use `UNAVAILABLE` if the client can retry just the failing call.
    //  (b) Use `ABORTED` if the client should retry at a higher level
    //      (e.g., when a client-specified test-and-set fails, indicating the
    //      client should restart a read-modify-write sequence).
    //  (c) Use `FAILED_PRECONDITION` if the client should not retry until
    //      the system state has been explicitly fixed.  E.g., if an "rmdir"
    //      fails because the directory is non-empty, `FAILED_PRECONDITION`
    //      should be returned since the client should not retry unless
    //      the files are deleted from the directory.
    //
    // HTTP Mapping: 400 Bad Request
    FAILED_PRECONDITION = 9;

    // The operation was aborted, typically due to a concurrency issue such as
    // a sequencer check failure or transaction abort.
    ABORTED = 10;

    // The operation was attempted past the valid range.  E.g., seeking or
    // reading past end-of-file.
    OUT_OF_RANGE = 11;

    // The operation is not implemented or is not supported/enabled in this
    // service.
    //
    // HTTP Mapping: 501 Not Implemented
    UNIMPLEMENTED = 12;

    INTERNAL = 13;

    // The service is currently unavailable.  This is most likely a
    // transient condition, which can be corrected by retrying with
    // a backoff.
    UNAVAILABLE = 14;

    // Unrecoverable data loss or corruption.
    DATA_LOSS = 15;


    // OUR own errors


    // Bad entity name was supplied
    BAD_NAME = 100;


    NAME_TAKEN=101;
}









