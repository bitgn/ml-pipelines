// Code generated by protoc-gen-go.
// source: db.proto
// DO NOT EDIT!

/*
Package db is a generated protocol buffer package.

It is generated from these files:
	db.proto

It has these top-level messages:
	ProjectData
	Expert
	DatasetData
	Job
	TenantStats
	AssetCache
	FieldSchema
	DatasetDescriptor
	AppVersionData
*/
package db

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import vo "mlp/catalog/vo"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Range int32

const (
	Range_Events           Range = 0
	Range_PROJECTS         Range = 1
	Range_DATASETS         Range = 2
	Range_PROJECT_DATASETS Range = 3
	Range_JOBS             Range = 4
	Range_STATS            Range = 5
	Range_ASSET_CACHE      Range = 6
	Range_EXPERTS          Range = 7
	Range_VERSION          Range = 255
)

var Range_name = map[int32]string{
	0:   "Events",
	1:   "PROJECTS",
	2:   "DATASETS",
	3:   "PROJECT_DATASETS",
	4:   "JOBS",
	5:   "STATS",
	6:   "ASSET_CACHE",
	7:   "EXPERTS",
	255: "VERSION",
}
var Range_value = map[string]int32{
	"Events":           0,
	"PROJECTS":         1,
	"DATASETS":         2,
	"PROJECT_DATASETS": 3,
	"JOBS":             4,
	"STATS":            5,
	"ASSET_CACHE":      6,
	"EXPERTS":          7,
	"VERSION":          255,
}

func (x Range) String() string {
	return proto.EnumName(Range_name, int32(x))
}
func (Range) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ProjectData struct {
	Name         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id           string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	DatasetCount int32  `protobuf:"varint,3,opt,name=dataset_count,json=datasetCount" json:"dataset_count,omitempty"`
	StorageBytes int64  `protobuf:"varint,4,opt,name=storage_bytes,json=storageBytes" json:"storage_bytes,omitempty"`
	JobCount     int32  `protobuf:"varint,5,opt,name=job_count,json=jobCount" json:"job_count,omitempty"`
	Description  string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
}

func (m *ProjectData) Reset()                    { *m = ProjectData{} }
func (m *ProjectData) String() string            { return proto.CompactTextString(m) }
func (*ProjectData) ProtoMessage()               {}
func (*ProjectData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Expert struct {
	ExpertId   string `protobuf:"bytes,1,opt,name=expert_id,json=expertId" json:"expert_id,omitempty"`
	ExpertName string `protobuf:"bytes,2,opt,name=expert_name,json=expertName" json:"expert_name,omitempty"`
}

func (m *Expert) Reset()                    { *m = Expert{} }
func (m *Expert) String() string            { return proto.CompactTextString(m) }
func (*Expert) ProtoMessage()               {}
func (*Expert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DatasetData struct {
	DatasetId       string            `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	Name            string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ProjectId       string            `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	RecordCount     int64             `protobuf:"varint,4,opt,name=record_count,json=recordCount" json:"record_count,omitempty"`
	FileCount       int64             `protobuf:"varint,5,opt,name=file_count,json=fileCount" json:"file_count,omitempty"`
	StorageBytes    int64             `protobuf:"varint,6,opt,name=storage_bytes,json=storageBytes" json:"storage_bytes,omitempty"`
	Sample          *vo.DatasetSample `protobuf:"bytes,7,opt,name=sample" json:"sample,omitempty"`
	UpdateTimestamp int64             `protobuf:"varint,8,opt,name=update_timestamp,json=updateTimestamp" json:"update_timestamp,omitempty"`
	DataFormat      string            `protobuf:"bytes,9,opt,name=data_format,json=dataFormat" json:"data_format,omitempty"`
	Description     string            `protobuf:"bytes,10,opt,name=description" json:"description,omitempty"`
	LocationId      string            `protobuf:"bytes,11,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	LocationUri     string            `protobuf:"bytes,12,opt,name=location_uri,json=locationUri" json:"location_uri,omitempty"`
	Experts         []string          `protobuf:"bytes,13,rep,name=experts" json:"experts,omitempty"`
	UpstreamJobs    []string          `protobuf:"bytes,14,rep,name=upstream_jobs,json=upstreamJobs" json:"upstream_jobs,omitempty"`
	DownstreamJobs  []string          `protobuf:"bytes,15,rep,name=downstream_jobs,json=downstreamJobs" json:"downstream_jobs,omitempty"`
}

func (m *DatasetData) Reset()                    { *m = DatasetData{} }
func (m *DatasetData) String() string            { return proto.CompactTextString(m) }
func (*DatasetData) ProtoMessage()               {}
func (*DatasetData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DatasetData) GetSample() *vo.DatasetSample {
	if m != nil {
		return m.Sample
	}
	return nil
}

type Job struct {
	JobId     string    `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	JobName   string    `protobuf:"bytes,2,opt,name=job_name,json=jobName" json:"job_name,omitempty"`
	ProjectId string    `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Inputs    []string  `protobuf:"bytes,4,rep,name=inputs" json:"inputs,omitempty"`
	Outputs   []string  `protobuf:"bytes,5,rep,name=outputs" json:"outputs,omitempty"`
	Experts   []*Expert `protobuf:"bytes,6,rep,name=experts" json:"experts,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Job) GetExperts() []*Expert {
	if m != nil {
		return m.Experts
	}
	return nil
}

type TenantStats struct {
	ProjectCount int32 `protobuf:"varint,1,opt,name=project_count,json=projectCount" json:"project_count,omitempty"`
	DatasetCount int32 `protobuf:"varint,2,opt,name=dataset_count,json=datasetCount" json:"dataset_count,omitempty"`
	JobCount     int32 `protobuf:"varint,3,opt,name=job_count,json=jobCount" json:"job_count,omitempty"`
	ReportCount  int32 `protobuf:"varint,4,opt,name=report_count,json=reportCount" json:"report_count,omitempty"`
	ExpertCount  int32 `protobuf:"varint,5,opt,name=expert_count,json=expertCount" json:"expert_count,omitempty"`
	ModelCount   int32 `protobuf:"varint,6,opt,name=model_count,json=modelCount" json:"model_count,omitempty"`
}

func (m *TenantStats) Reset()                    { *m = TenantStats{} }
func (m *TenantStats) String() string            { return proto.CompactTextString(m) }
func (*TenantStats) ProtoMessage()               {}
func (*TenantStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type AssetCache struct {
	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	Body   []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *AssetCache) Reset()                    { *m = AssetCache{} }
func (m *AssetCache) String() string            { return proto.CompactTextString(m) }
func (*AssetCache) ProtoMessage()               {}
func (*AssetCache) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type FieldSchema struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *FieldSchema) Reset()                    { *m = FieldSchema{} }
func (m *FieldSchema) String() string            { return proto.CompactTextString(m) }
func (*FieldSchema) ProtoMessage()               {}
func (*FieldSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type DatasetDescriptor struct {
	Type         string         `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	RecordCount  int64          `protobuf:"varint,2,opt,name=record_count,json=recordCount" json:"record_count,omitempty"`
	Schema       []*FieldSchema `protobuf:"bytes,3,rep,name=schema" json:"schema,omitempty"`
	SampleString string         `protobuf:"bytes,4,opt,name=sample_string,json=sampleString" json:"sample_string,omitempty"`
}

func (m *DatasetDescriptor) Reset()                    { *m = DatasetDescriptor{} }
func (m *DatasetDescriptor) String() string            { return proto.CompactTextString(m) }
func (*DatasetDescriptor) ProtoMessage()               {}
func (*DatasetDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DatasetDescriptor) GetSchema() []*FieldSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type AppVersionData struct {
	ProjectionVersion string `protobuf:"bytes,1,opt,name=ProjectionVersion" json:"ProjectionVersion,omitempty"`
}

func (m *AppVersionData) Reset()                    { *m = AppVersionData{} }
func (m *AppVersionData) String() string            { return proto.CompactTextString(m) }
func (*AppVersionData) ProtoMessage()               {}
func (*AppVersionData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*ProjectData)(nil), "ProjectData")
	proto.RegisterType((*Expert)(nil), "Expert")
	proto.RegisterType((*DatasetData)(nil), "DatasetData")
	proto.RegisterType((*Job)(nil), "Job")
	proto.RegisterType((*TenantStats)(nil), "TenantStats")
	proto.RegisterType((*AssetCache)(nil), "AssetCache")
	proto.RegisterType((*FieldSchema)(nil), "FieldSchema")
	proto.RegisterType((*DatasetDescriptor)(nil), "DatasetDescriptor")
	proto.RegisterType((*AppVersionData)(nil), "AppVersionData")
	proto.RegisterEnum("Range", Range_name, Range_value)
}

func init() { proto.RegisterFile("db.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 831 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x95, 0xdf, 0x6e, 0xe3, 0x44,
	0x14, 0xc6, 0x71, 0x1c, 0x3b, 0xf1, 0xb1, 0x37, 0xf5, 0x8e, 0x00, 0x19, 0x50, 0xb5, 0x59, 0x83,
	0x20, 0x20, 0xd4, 0x8b, 0x45, 0x48, 0x5c, 0x21, 0x65, 0x5b, 0x57, 0xa4, 0x17, 0x6d, 0x65, 0x9b,
	0x15, 0x77, 0xd6, 0x38, 0x33, 0xdb, 0x75, 0x14, 0x7b, 0x2c, 0xcf, 0x64, 0xa1, 0x2f, 0x80, 0x78,
	0x01, 0x9e, 0x82, 0x37, 0xe0, 0x55, 0x78, 0x18, 0xd0, 0xfc, 0xb1, 0xeb, 0x6d, 0x8b, 0xb4, 0x77,
	0x33, 0xbf, 0x73, 0x72, 0x3c, 0xe7, 0x9b, 0xf3, 0x4d, 0x60, 0x4e, 0xca, 0x93, 0xb6, 0x63, 0x82,
	0x7d, 0x3a, 0x7f, 0xcb, 0xf4, 0x2a, 0xfe, 0xdb, 0x02, 0xff, 0xba, 0x63, 0x3b, 0xba, 0x15, 0x67,
	0x58, 0x60, 0x84, 0x60, 0xda, 0xe0, 0x9a, 0x46, 0xd6, 0xd2, 0x5a, 0x79, 0xa9, 0x5a, 0xa3, 0x05,
	0x4c, 0x2a, 0x12, 0x4d, 0x14, 0x99, 0x54, 0x04, 0x7d, 0x0e, 0x4f, 0x08, 0x16, 0x98, 0x53, 0x51,
	0x6c, 0xd9, 0xa1, 0x11, 0x91, 0xbd, 0xb4, 0x56, 0x4e, 0x1a, 0x18, 0x78, 0x2a, 0x99, 0x4c, 0xe2,
	0x82, 0x75, 0xf8, 0x86, 0x16, 0xe5, 0xad, 0xa0, 0x3c, 0x9a, 0x2e, 0xad, 0x95, 0x9d, 0x06, 0x06,
	0xbe, 0x94, 0x0c, 0x7d, 0x06, 0xde, 0x8e, 0x95, 0xa6, 0x8a, 0xa3, 0xaa, 0xcc, 0x77, 0xac, 0xd4,
	0x15, 0x96, 0xe0, 0x13, 0xca, 0xb7, 0x5d, 0xd5, 0x8a, 0x8a, 0x35, 0x91, 0xab, 0xbe, 0x3f, 0x46,
	0xf1, 0x39, 0xb8, 0xc9, 0x6f, 0x2d, 0xed, 0x84, 0x2c, 0x44, 0xd5, 0xaa, 0xa8, 0x88, 0x39, 0xfb,
	0x5c, 0x83, 0x0d, 0x41, 0xcf, 0xc0, 0x37, 0x41, 0xd5, 0x9a, 0x6e, 0x04, 0x34, 0xba, 0xc4, 0x35,
	0x8d, 0xff, 0x98, 0x82, 0x7f, 0xa6, 0x0f, 0xaf, 0x44, 0x38, 0x06, 0xe8, 0x1b, 0x1c, 0xca, 0x79,
	0x86, 0x6c, 0xc8, 0xa0, 0xd1, 0x64, 0xa4, 0xd1, 0x31, 0x40, 0xab, 0x65, 0x94, 0x3f, 0xb1, 0xf5,
	0x4f, 0x0c, 0xd9, 0x10, 0xf4, 0x1c, 0x82, 0x8e, 0x6e, 0x59, 0x47, 0x4c, 0xaf, 0x5a, 0x0c, 0x5f,
	0x33, 0xdd, 0xee, 0x31, 0xc0, 0xeb, 0x6a, 0x4f, 0x47, 0x62, 0xd8, 0xa9, 0x27, 0xc9, 0xff, 0xe8,
	0xe9, 0x3e, 0xa2, 0xe7, 0x97, 0xe0, 0x72, 0x5c, 0xb7, 0x7b, 0x1a, 0xcd, 0x96, 0xd6, 0xca, 0x7f,
	0xb1, 0x38, 0x31, 0x6d, 0x65, 0x8a, 0xa6, 0x26, 0x8a, 0xbe, 0x86, 0xf0, 0xd0, 0x12, 0x2c, 0x68,
	0x21, 0xaa, 0x9a, 0x72, 0x81, 0xeb, 0x36, 0x9a, 0xab, 0x7a, 0x47, 0x9a, 0xe7, 0x3d, 0x96, 0xe2,
	0xc9, 0xce, 0x8b, 0xd7, 0xac, 0xab, 0xb1, 0x88, 0x3c, 0x2d, 0x9e, 0x44, 0xe7, 0x8a, 0xdc, 0xbf,
	0x26, 0x78, 0x70, 0x4d, 0xb2, 0xc4, 0x9e, 0x6d, 0xb1, 0x5c, 0x4b, 0x71, 0x7c, 0x5d, 0xa2, 0x47,
	0x5a, 0x9d, 0x21, 0xe1, 0xd0, 0x55, 0x51, 0xa0, 0x6b, 0xf4, 0xec, 0xe7, 0xae, 0x42, 0x11, 0xcc,
	0xf4, 0x85, 0xf1, 0xe8, 0xc9, 0xd2, 0x5e, 0x79, 0x69, 0xbf, 0x95, 0xc2, 0x1c, 0x5a, 0x2e, 0x3a,
	0x8a, 0xeb, 0x62, 0xc7, 0x4a, 0x1e, 0x2d, 0x54, 0x3c, 0xe8, 0xe1, 0x05, 0x2b, 0x39, 0xfa, 0x0a,
	0x8e, 0x08, 0xfb, 0xb5, 0x19, 0xa7, 0x1d, 0xa9, 0xb4, 0xc5, 0x1d, 0x96, 0x89, 0xf1, 0x5f, 0x16,
	0xd8, 0x17, 0xac, 0x44, 0x1f, 0x81, 0x2b, 0x27, 0x73, 0xb8, 0x7e, 0x67, 0xc7, 0xca, 0x0d, 0x41,
	0x9f, 0x80, 0x9c, 0xcf, 0xf1, 0x1c, 0xcd, 0x76, 0xac, 0xbc, 0x7c, 0x8f, 0x09, 0xf8, 0x18, 0xdc,
	0xaa, 0x69, 0x0f, 0x42, 0x1a, 0x41, 0x7e, 0xd8, 0xec, 0x64, 0x63, 0xec, 0x20, 0x54, 0xc0, 0xd1,
	0x8d, 0x99, 0x2d, 0x7a, 0x7e, 0xd7, 0xb2, 0xbb, 0xb4, 0x57, 0xfe, 0x8b, 0xd9, 0x89, 0x9e, 0xf6,
	0xa1, 0xf7, 0xf8, 0x1f, 0x0b, 0xfc, 0x9c, 0x36, 0xb8, 0x11, 0x99, 0xc0, 0x5a, 0x8b, 0xfe, 0x0c,
	0x7a, 0x8c, 0x2c, 0xed, 0x4c, 0x03, 0x87, 0x49, 0x7a, 0xd7, 0xbe, 0x93, 0x47, 0xec, 0xfb, 0x8e,
	0x33, 0xed, 0x7b, 0xce, 0x54, 0xd3, 0xdc, 0xb2, 0x4e, 0x8c, 0xa6, 0xd9, 0x91, 0xd3, 0x2c, 0xd9,
	0x90, 0x62, 0x3c, 0x37, 0x36, 0xb7, 0xf1, 0xa1, 0x4e, 0x79, 0x06, 0x7e, 0xcd, 0x08, 0xdd, 0x9b,
	0x0c, 0x57, 0x65, 0x80, 0x42, 0x2a, 0x21, 0xfe, 0x01, 0x60, 0xcd, 0xe5, 0x89, 0xf0, 0xf6, 0x0d,
	0x95, 0x02, 0x92, 0xea, 0x86, 0x72, 0xdd, 0x54, 0x90, 0x9a, 0x9d, 0x74, 0x63, 0xc9, 0xc8, 0xad,
	0xea, 0x22, 0x48, 0xd5, 0x3a, 0xfe, 0x1e, 0xfc, 0xf3, 0x8a, 0xee, 0x49, 0xb6, 0x7d, 0x43, 0xeb,
	0xc7, 0x1f, 0x35, 0x04, 0x53, 0x71, 0xdb, 0x0e, 0x26, 0x96, 0xeb, 0xf8, 0x4f, 0x0b, 0x9e, 0xf6,
	0xef, 0x80, 0x99, 0x5f, 0xd6, 0x0d, 0x99, 0xd6, 0x5d, 0xe6, 0x03, 0x3f, 0x4f, 0x1e, 0xfa, 0xf9,
	0x0b, 0x70, 0xb9, 0xfa, 0x7c, 0x64, 0xab, 0xdb, 0x0b, 0x4e, 0x46, 0x47, 0x4a, 0x4d, 0x4c, 0xd9,
	0x5a, 0x79, 0xb2, 0xe0, 0xa2, 0xab, 0x9a, 0x1b, 0xa5, 0xa5, 0x97, 0x06, 0x1a, 0x66, 0x8a, 0xc5,
	0x3f, 0xc2, 0x62, 0xdd, 0xb6, 0xaf, 0x68, 0xc7, 0x2b, 0xd6, 0xa8, 0x17, 0xea, 0x5b, 0x78, 0x6a,
	0x5e, 0xed, 0x8a, 0x35, 0x26, 0x60, 0x0e, 0xf8, 0x30, 0xf0, 0xcd, 0xef, 0x16, 0x38, 0x29, 0x6e,
	0x6e, 0x28, 0x02, 0x70, 0x93, 0xb7, 0xb4, 0x11, 0x3c, 0xfc, 0x00, 0x05, 0x30, 0xbf, 0x4e, 0xaf,
	0x2e, 0x92, 0xd3, 0x3c, 0x0b, 0x2d, 0xb9, 0x3b, 0x5b, 0xe7, 0xeb, 0x2c, 0xc9, 0xb3, 0x70, 0x82,
	0x3e, 0x84, 0xd0, 0xc4, 0x8a, 0x81, 0xda, 0x68, 0x0e, 0xd3, 0x8b, 0xab, 0x97, 0x59, 0x38, 0x45,
	0x1e, 0x38, 0x59, 0xbe, 0xce, 0xb3, 0xd0, 0x41, 0x47, 0xe0, 0xaf, 0xb3, 0x2c, 0xc9, 0x8b, 0xd3,
	0xf5, 0xe9, 0x4f, 0x49, 0xe8, 0x22, 0x1f, 0x66, 0xc9, 0x2f, 0xd7, 0x49, 0x9a, 0x67, 0xe1, 0x0c,
	0x05, 0x30, 0x7b, 0x95, 0xa4, 0xd9, 0xe6, 0xea, 0x32, 0xfc, 0xd7, 0x2a, 0x5d, 0xf5, 0xa7, 0xf3,
	0xdd, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xf2, 0xd1, 0xaa, 0x8a, 0x06, 0x00, 0x00,
}
