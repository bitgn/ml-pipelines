// Code generated by protoc-gen-go.
// source: db.proto
// DO NOT EDIT!

/*
Package db is a generated protocol buffer package.

It is generated from these files:
	db.proto

It has these top-level messages:
	ProjectData
	Expert
	DatasetData
	Job
	TenantStats
	AssetCache
	FieldSchema
	DatasetDescriptor
	AppVersionData
*/
package db

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import vo "mlp/catalog/vo"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Range int32

const (
	Range_Events        Range = 0
	Range_PROJECTS      Range = 1
	Range_DATASETS      Range = 2
	Range_JOBS          Range = 4
	Range_STATS         Range = 5
	Range_ASSET_CACHE   Range = 6
	Range_EXPERTS       Range = 7
	Range_PROJECT_NAMES Range = 10
	// scoped to project
	Range_DATASET_NAMES_SCOPED Range = 11
	Range_IDX_PROJECT_DATASETS Range = 20
	Range_VERSION              Range = 255
)

var Range_name = map[int32]string{
	0:   "Events",
	1:   "PROJECTS",
	2:   "DATASETS",
	4:   "JOBS",
	5:   "STATS",
	6:   "ASSET_CACHE",
	7:   "EXPERTS",
	10:  "PROJECT_NAMES",
	11:  "DATASET_NAMES_SCOPED",
	20:  "IDX_PROJECT_DATASETS",
	255: "VERSION",
}
var Range_value = map[string]int32{
	"Events":               0,
	"PROJECTS":             1,
	"DATASETS":             2,
	"JOBS":                 4,
	"STATS":                5,
	"ASSET_CACHE":          6,
	"EXPERTS":              7,
	"PROJECT_NAMES":        10,
	"DATASET_NAMES_SCOPED": 11,
	"IDX_PROJECT_DATASETS": 20,
	"VERSION":              255,
}

func (x Range) String() string {
	return proto.EnumName(Range_name, int32(x))
}
func (Range) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ProjectData struct {
	Title        string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Uid          []byte `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	DatasetCount int32  `protobuf:"varint,4,opt,name=dataset_count,json=datasetCount" json:"dataset_count,omitempty"`
	StorageBytes int64  `protobuf:"varint,5,opt,name=storage_bytes,json=storageBytes" json:"storage_bytes,omitempty"`
	JobCount     int32  `protobuf:"varint,6,opt,name=job_count,json=jobCount" json:"job_count,omitempty"`
	Description  string `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
}

func (m *ProjectData) Reset()                    { *m = ProjectData{} }
func (m *ProjectData) String() string            { return proto.CompactTextString(m) }
func (*ProjectData) ProtoMessage()               {}
func (*ProjectData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Expert struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Uid      []byte `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	FullName string `protobuf:"bytes,3,opt,name=full_name,json=fullName" json:"full_name,omitempty"`
	Email    string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
}

func (m *Expert) Reset()                    { *m = Expert{} }
func (m *Expert) String() string            { return proto.CompactTextString(m) }
func (*Expert) ProtoMessage()               {}
func (*Expert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DatasetData struct {
	Uid          []byte `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Title        string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	ProjectUid   []byte `protobuf:"bytes,4,opt,name=project_uid,json=projectUid,proto3" json:"project_uid,omitempty"`
	RecordCount  int64  `protobuf:"varint,5,opt,name=record_count,json=recordCount" json:"record_count,omitempty"`
	FileCount    int64  `protobuf:"varint,6,opt,name=file_count,json=fileCount" json:"file_count,omitempty"`
	StorageBytes int64  `protobuf:"varint,7,opt,name=storage_bytes,json=storageBytes" json:"storage_bytes,omitempty"`
	Sample          *vo.DatasetSample `protobuf:"bytes,8,opt,name=sample" json:"sample,omitempty"`
	UpdateTimestamp int64             `protobuf:"varint,9,opt,name=update_timestamp,json=updateTimestamp" json:"update_timestamp,omitempty"`
	DataFormat      string            `protobuf:"bytes,10,opt,name=data_format,json=dataFormat" json:"data_format,omitempty"`
	Description     string            `protobuf:"bytes,11,opt,name=description" json:"description,omitempty"`
	LocationId      string            `protobuf:"bytes,12,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	LocationUri     string            `protobuf:"bytes,13,opt,name=location_uri,json=locationUri" json:"location_uri,omitempty"`
	Experts         [][]byte          `protobuf:"bytes,14,rep,name=experts,proto3" json:"experts,omitempty"`
	UpstreamJobs    [][]byte          `protobuf:"bytes,15,rep,name=upstream_jobs,json=upstreamJobs,proto3" json:"upstream_jobs,omitempty"`
	DownstreamJobs  [][]byte          `protobuf:"bytes,16,rep,name=downstream_jobs,json=downstreamJobs,proto3" json:"downstream_jobs,omitempty"`
	ProjectName     string            `protobuf:"bytes,17,opt,name=project_name,json=projectName" json:"project_name,omitempty"`
}

func (m *DatasetData) Reset()                    { *m = DatasetData{} }
func (m *DatasetData) String() string            { return proto.CompactTextString(m) }
func (*DatasetData) ProtoMessage()               {}
func (*DatasetData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DatasetData) GetSample() *vo.DatasetSample {
	if m != nil {
		return m.Sample
	}
	return nil
}

type Job struct {
	Uid        []byte          `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ProjectUid []byte          `protobuf:"bytes,2,opt,name=project_uid,json=projectUid,proto3" json:"project_uid,omitempty"`
	Name       string          `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Title      string          `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Inputs     []*vo.JobInput  `protobuf:"bytes,5,rep,name=inputs" json:"inputs,omitempty"`
	Outputs    []*vo.JobOutput `protobuf:"bytes,6,rep,name=outputs" json:"outputs,omitempty"`
	Experts    [][]byte        `protobuf:"bytes,7,rep,name=experts,proto3" json:"experts,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Job) GetInputs() []*vo.JobInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Job) GetOutputs() []*vo.JobOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type TenantStats struct {
	ProjectCount int32 `protobuf:"varint,1,opt,name=project_count,json=projectCount" json:"project_count,omitempty"`
	DatasetCount int32 `protobuf:"varint,2,opt,name=dataset_count,json=datasetCount" json:"dataset_count,omitempty"`
	JobCount     int32 `protobuf:"varint,3,opt,name=job_count,json=jobCount" json:"job_count,omitempty"`
	ReportCount  int32 `protobuf:"varint,4,opt,name=report_count,json=reportCount" json:"report_count,omitempty"`
	ExpertCount  int32 `protobuf:"varint,5,opt,name=expert_count,json=expertCount" json:"expert_count,omitempty"`
	ModelCount   int32 `protobuf:"varint,6,opt,name=model_count,json=modelCount" json:"model_count,omitempty"`
}

func (m *TenantStats) Reset()                    { *m = TenantStats{} }
func (m *TenantStats) String() string            { return proto.CompactTextString(m) }
func (*TenantStats) ProtoMessage()               {}
func (*TenantStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type AssetCache struct {
	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	Body   []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *AssetCache) Reset()                    { *m = AssetCache{} }
func (m *AssetCache) String() string            { return proto.CompactTextString(m) }
func (*AssetCache) ProtoMessage()               {}
func (*AssetCache) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type FieldSchema struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *FieldSchema) Reset()                    { *m = FieldSchema{} }
func (m *FieldSchema) String() string            { return proto.CompactTextString(m) }
func (*FieldSchema) ProtoMessage()               {}
func (*FieldSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type DatasetDescriptor struct {
	Type         string         `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	RecordCount  int64          `protobuf:"varint,2,opt,name=record_count,json=recordCount" json:"record_count,omitempty"`
	Schema       []*FieldSchema `protobuf:"bytes,3,rep,name=schema" json:"schema,omitempty"`
	SampleString string         `protobuf:"bytes,4,opt,name=sample_string,json=sampleString" json:"sample_string,omitempty"`
}

func (m *DatasetDescriptor) Reset()                    { *m = DatasetDescriptor{} }
func (m *DatasetDescriptor) String() string            { return proto.CompactTextString(m) }
func (*DatasetDescriptor) ProtoMessage()               {}
func (*DatasetDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DatasetDescriptor) GetSchema() []*FieldSchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type AppVersionData struct {
	ProjectionVersion string `protobuf:"bytes,1,opt,name=ProjectionVersion" json:"ProjectionVersion,omitempty"`
}

func (m *AppVersionData) Reset()                    { *m = AppVersionData{} }
func (m *AppVersionData) String() string            { return proto.CompactTextString(m) }
func (*AppVersionData) ProtoMessage()               {}
func (*AppVersionData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*ProjectData)(nil), "ProjectData")
	proto.RegisterType((*Expert)(nil), "Expert")
	proto.RegisterType((*DatasetData)(nil), "DatasetData")
	proto.RegisterType((*Job)(nil), "Job")
	proto.RegisterType((*TenantStats)(nil), "TenantStats")
	proto.RegisterType((*AssetCache)(nil), "AssetCache")
	proto.RegisterType((*FieldSchema)(nil), "FieldSchema")
	proto.RegisterType((*DatasetDescriptor)(nil), "DatasetDescriptor")
	proto.RegisterType((*AppVersionData)(nil), "AppVersionData")
	proto.RegisterEnum("Range", Range_name, Range_value)
}

func init() { proto.RegisterFile("db.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 890 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x95, 0xdf, 0x6e, 0xe3, 0xc4,
	0x17, 0xc7, 0x7f, 0x13, 0x27, 0x4e, 0x72, 0xec, 0xb6, 0xee, 0xa8, 0xfa, 0xc9, 0x62, 0x85, 0x36,
	0x35, 0x2b, 0x08, 0x08, 0xf5, 0x62, 0x11, 0x12, 0x57, 0x48, 0xd9, 0xc4, 0x2b, 0x1a, 0x89, 0xa6,
	0xb2, 0xbd, 0xab, 0xbd, 0xb3, 0xc6, 0xf1, 0xb4, 0x3b, 0x95, 0xed, 0xb1, 0xec, 0xc9, 0x42, 0x1f,
	0x84, 0x57, 0x81, 0x27, 0xe0, 0x05, 0xb8, 0xe5, 0x61, 0x40, 0xf3, 0xc7, 0x69, 0xd2, 0x84, 0xbb,
	0x99, 0xcf, 0x7c, 0x73, 0x72, 0xe6, 0x7b, 0xce, 0x1c, 0xc3, 0x28, 0xcf, 0xae, 0xea, 0x86, 0x0b,
	0xfe, 0xd9, 0xe8, 0x13, 0xd7, 0xab, 0xe0, 0x2f, 0x04, 0xce, 0x6d, 0xc3, 0x1f, 0xe8, 0x5a, 0x2c,
	0x88, 0x20, 0xf8, 0x02, 0x06, 0x82, 0x89, 0x82, 0xfa, 0x68, 0x82, 0xa6, 0xe3, 0x48, 0x6f, 0x30,
	0x86, 0x7e, 0x45, 0x4a, 0xea, 0xf7, 0x14, 0x54, 0x6b, 0xec, 0x81, 0xb5, 0x61, 0xb9, 0x6f, 0x4d,
	0xd0, 0xd4, 0x8d, 0xe4, 0x12, 0x7f, 0x01, 0x27, 0x39, 0x11, 0xa4, 0xa5, 0x22, 0x5d, 0xf3, 0x4d,
	0x25, 0xfc, 0xfe, 0x04, 0x4d, 0x07, 0x91, 0x6b, 0xe0, 0x5c, 0x32, 0x29, 0x6a, 0x05, 0x6f, 0xc8,
	0x3d, 0x4d, 0xb3, 0x47, 0x41, 0x5b, 0x7f, 0x30, 0x41, 0x53, 0x2b, 0x72, 0x0d, 0x7c, 0x23, 0x19,
	0x7e, 0x01, 0xe3, 0x07, 0x9e, 0x99, 0x28, 0xb6, 0x8a, 0x32, 0x7a, 0xe0, 0x99, 0x8e, 0x30, 0x01,
	0x27, 0xa7, 0xed, 0xba, 0x61, 0xb5, 0x60, 0xbc, 0xf2, 0x87, 0x2a, 0xa7, 0x5d, 0x14, 0x10, 0xb0,
	0xc3, 0x5f, 0x6b, 0xda, 0x88, 0x6d, 0xe2, 0xe8, 0x30, 0xf1, 0xde, 0x53, 0xe2, 0x2f, 0x60, 0x7c,
	0xb7, 0x29, 0x8a, 0x54, 0x49, 0x2d, 0x25, 0x1d, 0x49, 0x70, 0x23, 0xe5, 0x17, 0x30, 0xa0, 0x25,
	0x61, 0x85, 0xba, 0xcd, 0x38, 0xd2, 0x9b, 0xe0, 0xf7, 0x3e, 0x38, 0x0b, 0x7d, 0x2f, 0xe5, 0x9b,
	0x09, 0x8a, 0x9e, 0x82, 0x1e, 0xf3, 0x6c, 0xeb, 0xae, 0xb5, 0xeb, 0xee, 0x4b, 0x70, 0x6a, 0x5d,
	0x82, 0x54, 0xc6, 0xe8, 0xab, 0x18, 0x60, 0xd0, 0x3b, 0x96, 0xe3, 0x4b, 0x70, 0x1b, 0xba, 0xe6,
	0x4d, 0x6e, 0x1c, 0xd1, 0x96, 0x39, 0x9a, 0x69, 0x53, 0x3e, 0x07, 0xb8, 0x63, 0x05, 0xdd, 0xb1,
	0xcc, 0x8a, 0xc6, 0x92, 0xfc, 0x87, 0xeb, 0xc3, 0x23, 0xae, 0x7f, 0x09, 0x76, 0x4b, 0xca, 0xba,
	0xa0, 0xfe, 0x68, 0x82, 0xa6, 0xce, 0xeb, 0xd3, 0x2b, 0x73, 0xc3, 0x58, 0xd1, 0xc8, 0x9c, 0xe2,
	0xaf, 0xc1, 0xdb, 0xd4, 0x39, 0x11, 0x34, 0x15, 0xac, 0xa4, 0xad, 0x20, 0x65, 0xed, 0x8f, 0x55,
	0xbc, 0x33, 0xcd, 0x93, 0x0e, 0xcb, 0xab, 0xc9, 0xea, 0xa7, 0x77, 0xbc, 0x29, 0x89, 0xf0, 0x41,
	0x5d, 0x1b, 0x24, 0x7a, 0xab, 0xc8, 0xf3, 0x62, 0x3a, 0x07, 0xc5, 0x94, 0x21, 0x0a, 0xbe, 0x26,
	0x72, 0x9d, 0xb2, 0xdc, 0x77, 0x75, 0x88, 0x0e, 0x5d, 0x2b, 0x77, 0xb6, 0x82, 0x4d, 0xc3, 0xfc,
	0x13, 0x1d, 0xa3, 0x63, 0xef, 0x1a, 0x86, 0x7d, 0x18, 0x52, 0xd5, 0x10, 0xad, 0x7f, 0x3a, 0xb1,
	0xa6, 0x6e, 0xd4, 0x6d, 0xa5, 0x31, 0x9b, 0xba, 0x15, 0x0d, 0x25, 0x65, 0xfa, 0xc0, 0xb3, 0xd6,
	0x3f, 0x53, 0xe7, 0x6e, 0x07, 0x97, 0x3c, 0x6b, 0xf1, 0x57, 0x70, 0x96, 0xf3, 0x5f, 0xaa, 0x5d,
	0x99, 0xa7, 0x64, 0xa7, 0x4f, 0x58, 0x09, 0x2f, 0xc1, 0xed, 0x2a, 0xa9, 0x6a, 0x7f, 0xae, 0x53,
	0x31, 0x4c, 0xb6, 0x53, 0xf0, 0x27, 0x02, 0x6b, 0xc9, 0xb3, 0x23, 0x0d, 0xf3, 0xac, 0x0d, 0x7a,
	0x07, 0x6d, 0xd0, 0x75, 0x94, 0x75, 0xac, 0xa3, 0xfa, 0xbb, 0x1d, 0x75, 0x09, 0x36, 0xab, 0xea,
	0x8d, 0x90, 0xaf, 0xcb, 0x9a, 0x3a, 0xaf, 0xc7, 0x57, 0x4b, 0x9e, 0x5d, 0x4b, 0x12, 0x99, 0x03,
	0xfc, 0x0a, 0x86, 0x7c, 0x23, 0x94, 0xc6, 0x56, 0x1a, 0x90, 0x9a, 0x95, 0x42, 0x51, 0x77, 0xb4,
	0x6b, 0xdc, 0x70, 0xcf, 0xb8, 0xe0, 0x6f, 0x04, 0x4e, 0x42, 0x2b, 0x52, 0x89, 0x58, 0x10, 0x6d,
	0x64, 0x97, 0xbd, 0xee, 0x41, 0xa4, 0x1f, 0xbf, 0x81, 0xdb, 0x36, 0xdc, 0x9f, 0x10, 0xbd, 0x23,
	0x13, 0x62, 0xef, 0xf1, 0x5b, 0xcf, 0x1e, 0xbf, 0x7a, 0x0a, 0x35, 0x6f, 0xf6, 0x47, 0x8c, 0xa3,
	0xd9, 0x56, 0xa2, 0x93, 0xdc, 0x79, 0x2d, 0x83, 0xc8, 0xd1, 0x4c, 0x4b, 0x5e, 0x82, 0x53, 0xf2,
	0x9c, 0x16, 0x7b, 0x13, 0x06, 0x14, 0x52, 0x82, 0xe0, 0x07, 0x80, 0x59, 0x2b, 0x33, 0x22, 0xeb,
	0x8f, 0x14, 0xff, 0x1f, 0xec, 0x9c, 0xdd, 0xd3, 0x56, 0x98, 0x72, 0x99, 0x9d, 0x2c, 0x48, 0xc6,
	0xf3, 0x47, 0x53, 0x2a, 0xb5, 0x0e, 0xbe, 0x07, 0xe7, 0x2d, 0xa3, 0x45, 0x1e, 0xaf, 0x3f, 0xd2,
	0x92, 0x1c, 0x1d, 0x40, 0x18, 0xfa, 0xe2, 0xb1, 0xde, 0x4e, 0x06, 0xb9, 0x0e, 0x7e, 0x43, 0x70,
	0xde, 0xcd, 0x13, 0xd3, 0xfc, 0xbc, 0xd9, 0x2a, 0xd1, 0x93, 0xf2, 0x60, 0x18, 0xf4, 0x0e, 0x87,
	0xc1, 0x2b, 0xb0, 0x5b, 0xf5, 0xf7, 0xbe, 0xa5, 0x4a, 0xeb, 0x5e, 0xed, 0xa4, 0x14, 0x99, 0x33,
	0x35, 0x13, 0xd4, 0x83, 0x4e, 0x5b, 0xd1, 0xb0, 0xea, 0xde, 0xb4, 0x90, 0xab, 0x61, 0xac, 0x58,
	0xf0, 0x23, 0x9c, 0xce, 0xea, 0xfa, 0x3d, 0x6d, 0x5a, 0xc6, 0x2b, 0x35, 0xe9, 0xbe, 0x85, 0x73,
	0xf3, 0xc1, 0x60, 0xbc, 0x32, 0x07, 0x26, 0xc1, 0xc3, 0x83, 0x6f, 0xfe, 0x40, 0x30, 0x88, 0x48,
	0x75, 0x4f, 0x31, 0x80, 0x1d, 0x7e, 0xa2, 0x95, 0x68, 0xbd, 0xff, 0x61, 0x17, 0x46, 0xb7, 0xd1,
	0x6a, 0x19, 0xce, 0x93, 0xd8, 0x43, 0x72, 0xb7, 0x98, 0x25, 0xb3, 0x38, 0x4c, 0x62, 0xaf, 0x87,
	0x47, 0xd0, 0x5f, 0xae, 0xde, 0xc4, 0x5e, 0x1f, 0x8f, 0x61, 0x10, 0x27, 0xb3, 0x24, 0xf6, 0x06,
	0xf8, 0x0c, 0x9c, 0x59, 0x1c, 0x87, 0x49, 0x3a, 0x9f, 0xcd, 0x7f, 0x0a, 0x3d, 0x1b, 0x3b, 0x30,
	0x0c, 0x3f, 0xdc, 0x86, 0x51, 0x12, 0x7b, 0x43, 0x7c, 0x0e, 0x27, 0x26, 0x5c, 0x7a, 0x33, 0xfb,
	0x39, 0x8c, 0x3d, 0xc0, 0x3e, 0x5c, 0x98, 0x98, 0x1a, 0xa5, 0xf1, 0x7c, 0x75, 0x1b, 0x2e, 0x3c,
	0x47, 0x9e, 0x5c, 0x2f, 0x3e, 0xa4, 0xdd, 0x0f, 0xb6, 0xff, 0x7c, 0x81, 0x5d, 0x18, 0xbe, 0x0f,
	0xa3, 0xf8, 0x7a, 0x75, 0xe3, 0xfd, 0x83, 0x32, 0x5b, 0x7d, 0x20, 0xbf, 0xfb, 0x37, 0x00, 0x00,
	0xff, 0xff, 0x61, 0x4f, 0xae, 0x66, 0x36, 0x07, 0x00, 0x00,
}
