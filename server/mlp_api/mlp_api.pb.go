// Code generated by protoc-gen-go.
// source: mlp_api.proto
// DO NOT EDIT!

/*
Package mlp_api is a generated protocol buffer package.

It is generated from these files:
	mlp_api.proto

It has these top-level messages:
	CreateProjectRequest
	CreateProjectResponse
	CreateDatasetResponse
	StatRequest
	StatResponse
	ApiResponse
	CreateDatasetRequest
	UpdateDatasetRequest
	ApiError
*/
package mlp_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import vo "mlp/catalog/vo"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusCode int32

const (
	// codes in gRPC
	StatusCode_OK StatusCode = 0
	// The operation was cancelled, typically by the caller.
	StatusCode_CANCELLED StatusCode = 1
	// Unknown error.  For example, this error may be returned when
	// a `Status` value received from another address space belongs to
	// an error space that is not known in this address space.  Also
	// errors raised by APIs that do not return enough error information
	// may be converted to this error.
	StatusCode_UNKNOWN StatusCode = 2
	// The client specified an invalid argument.  Note that this differs
	// from `FAILED_PRECONDITION`.  `INVALID_ARGUMENT` indicates arguments
	// that are problematic regardless of the state of the system
	// (e.g., a malformed file name).
	//
	// HTTP Mapping: 400 Bad Request
	StatusCode_INVALID_ARGUMENT StatusCode = 3
	// The deadline expired before the operation could complete. For operations
	// that change the state of the system, this error may be returned
	// even if the operation has completed successfully.  For example, a
	// successful response from a server could have been delayed long
	// enough for the deadline to expire.
	StatusCode_DEADLINE_EXCEEDED StatusCode = 4
	StatusCode_NOT_FOUND         StatusCode = 5
	// The entity that a client attempted to create (e.g., file or directory)
	// already exists.
	StatusCode_ALREADY_EXISTS StatusCode = 6
	// The caller does not have permission to execute the specified
	// operation. `PERMISSION_DENIED` must not be used for rejections
	// caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
	// instead for those errors). `PERMISSION_DENIED` must not be
	// used if the caller can not be identified (use `UNAUTHENTICATED`
	// instead for those errors). This error code does not imply the
	// request is valid or the requested entity exists or satisfies
	// other pre-conditions.
	StatusCode_PERMISSION_DENIED StatusCode = 7
	// The request does not have valid authentication credentials for the
	// operation.
	StatusCode_UNAUTHENTICATED StatusCode = 16
	// Some resource has been exhausted, perhaps a per-user quota, or
	// perhaps the entire file system is out of space.
	StatusCode_RESOURCE_EXHAUSTED StatusCode = 8
	// The operation was rejected because the system is not in a state
	// required for the operation's execution.  For example, the directory
	// to be deleted is non-empty, an rmdir operation is applied to
	// a non-directory, etc.
	//
	// Service implementors can use the following guidelines to decide
	// between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
	//  (a) Use `UNAVAILABLE` if the client can retry just the failing call.
	//  (b) Use `ABORTED` if the client should retry at a higher level
	//      (e.g., when a client-specified test-and-set fails, indicating the
	//      client should restart a read-modify-write sequence).
	//  (c) Use `FAILED_PRECONDITION` if the client should not retry until
	//      the system state has been explicitly fixed.  E.g., if an "rmdir"
	//      fails because the directory is non-empty, `FAILED_PRECONDITION`
	//      should be returned since the client should not retry unless
	//      the files are deleted from the directory.
	//
	// HTTP Mapping: 400 Bad Request
	StatusCode_FAILED_PRECONDITION StatusCode = 9
	// The operation was aborted, typically due to a concurrency issue such as
	// a sequencer check failure or transaction abort.
	StatusCode_ABORTED StatusCode = 10
	// The operation was attempted past the valid range.  E.g., seeking or
	// reading past end-of-file.
	StatusCode_OUT_OF_RANGE StatusCode = 11
	// The operation is not implemented or is not supported/enabled in this
	// service.
	//
	// HTTP Mapping: 501 Not Implemented
	StatusCode_UNIMPLEMENTED StatusCode = 12
	StatusCode_INTERNAL      StatusCode = 13
	// The service is currently unavailable.  This is most likely a
	// transient condition, which can be corrected by retrying with
	// a backoff.
	StatusCode_UNAVAILABLE StatusCode = 14
	// Unrecoverable data loss or corruption.
	StatusCode_DATA_LOSS StatusCode = 15
	// Bad entity name was supplied
	StatusCode_BAD_NAME   StatusCode = 100
	StatusCode_NAME_TAKEN StatusCode = 101
)

var StatusCode_name = map[int32]string{
	0:   "OK",
	1:   "CANCELLED",
	2:   "UNKNOWN",
	3:   "INVALID_ARGUMENT",
	4:   "DEADLINE_EXCEEDED",
	5:   "NOT_FOUND",
	6:   "ALREADY_EXISTS",
	7:   "PERMISSION_DENIED",
	16:  "UNAUTHENTICATED",
	8:   "RESOURCE_EXHAUSTED",
	9:   "FAILED_PRECONDITION",
	10:  "ABORTED",
	11:  "OUT_OF_RANGE",
	12:  "UNIMPLEMENTED",
	13:  "INTERNAL",
	14:  "UNAVAILABLE",
	15:  "DATA_LOSS",
	100: "BAD_NAME",
	101: "NAME_TAKEN",
}
var StatusCode_value = map[string]int32{
	"OK":                  0,
	"CANCELLED":           1,
	"UNKNOWN":             2,
	"INVALID_ARGUMENT":    3,
	"DEADLINE_EXCEEDED":   4,
	"NOT_FOUND":           5,
	"ALREADY_EXISTS":      6,
	"PERMISSION_DENIED":   7,
	"UNAUTHENTICATED":     16,
	"RESOURCE_EXHAUSTED":  8,
	"FAILED_PRECONDITION": 9,
	"ABORTED":             10,
	"OUT_OF_RANGE":        11,
	"UNIMPLEMENTED":       12,
	"INTERNAL":            13,
	"UNAVAILABLE":         14,
	"DATA_LOSS":           15,
	"BAD_NAME":            100,
	"NAME_TAKEN":          101,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}
func (StatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateProjectRequest struct {
	Name string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Meta *vo.ProjectMetadataDelta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
}

func (m *CreateProjectRequest) Reset()                    { *m = CreateProjectRequest{} }
func (m *CreateProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateProjectRequest) ProtoMessage()               {}
func (*CreateProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateProjectRequest) GetMeta() *vo.ProjectMetadataDelta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type CreateProjectResponse struct {
	Error *ApiError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Uid   []byte    `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *CreateProjectResponse) Reset()                    { *m = CreateProjectResponse{} }
func (m *CreateProjectResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateProjectResponse) ProtoMessage()               {}
func (*CreateProjectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateProjectResponse) GetError() *ApiError {
	if m != nil {
		return m.Error
	}
	return nil
}

type CreateDatasetResponse struct {
	Error *ApiError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Uid   []byte    `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *CreateDatasetResponse) Reset()                    { *m = CreateDatasetResponse{} }
func (m *CreateDatasetResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDatasetResponse) ProtoMessage()               {}
func (*CreateDatasetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateDatasetResponse) GetError() *ApiError {
	if m != nil {
		return m.Error
	}
	return nil
}

type StatRequest struct {
}

func (m *StatRequest) Reset()                    { *m = StatRequest{} }
func (m *StatRequest) String() string            { return proto.CompactTextString(m) }
func (*StatRequest) ProtoMessage()               {}
func (*StatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type StatResponse struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *StatResponse) Reset()                    { *m = StatResponse{} }
func (m *StatResponse) String() string            { return proto.CompactTextString(m) }
func (*StatResponse) ProtoMessage()               {}
func (*StatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ApiResponse struct {
	Error *ApiError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *ApiResponse) Reset()                    { *m = ApiResponse{} }
func (m *ApiResponse) String() string            { return proto.CompactTextString(m) }
func (*ApiResponse) ProtoMessage()               {}
func (*ApiResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ApiResponse) GetError() *ApiError {
	if m != nil {
		return m.Error
	}
	return nil
}

type CreateDatasetRequest struct {
	ProjectUid []byte                   `protobuf:"bytes,1,opt,name=project_uid,json=projectUid,proto3" json:"project_uid,omitempty"`
	Name       string                   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Meta       *vo.DatasetMetadataDelta `protobuf:"bytes,3,opt,name=meta" json:"meta,omitempty"`
}

func (m *CreateDatasetRequest) Reset()                    { *m = CreateDatasetRequest{} }
func (m *CreateDatasetRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDatasetRequest) ProtoMessage()               {}
func (*CreateDatasetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreateDatasetRequest) GetMeta() *vo.DatasetMetadataDelta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type UpdateDatasetRequest struct {
	// option 1
	Uid  []byte                   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Meta *vo.DatasetMetadataDelta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
}

func (m *UpdateDatasetRequest) Reset()                    { *m = UpdateDatasetRequest{} }
func (m *UpdateDatasetRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDatasetRequest) ProtoMessage()               {}
func (*UpdateDatasetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateDatasetRequest) GetMeta() *vo.DatasetMetadataDelta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type ApiError struct {
	Code    StatusCode `protobuf:"varint,1,opt,name=code,enum=StatusCode" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	// For API matching and tests
	SubjectUid  []byte   `protobuf:"bytes,3,opt,name=subject_uid,json=subjectUid,proto3" json:"subject_uid,omitempty"`
	SubjectName string   `protobuf:"bytes,4,opt,name=subject_name,json=subjectName" json:"subject_name,omitempty"`
	FieldName   string   `protobuf:"bytes,5,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	Details     []string `protobuf:"bytes,6,rep,name=details" json:"details,omitempty"`
}

func (m *ApiError) Reset()                    { *m = ApiError{} }
func (m *ApiError) String() string            { return proto.CompactTextString(m) }
func (*ApiError) ProtoMessage()               {}
func (*ApiError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*CreateProjectRequest)(nil), "CreateProjectRequest")
	proto.RegisterType((*CreateProjectResponse)(nil), "CreateProjectResponse")
	proto.RegisterType((*CreateDatasetResponse)(nil), "CreateDatasetResponse")
	proto.RegisterType((*StatRequest)(nil), "StatRequest")
	proto.RegisterType((*StatResponse)(nil), "StatResponse")
	proto.RegisterType((*ApiResponse)(nil), "ApiResponse")
	proto.RegisterType((*CreateDatasetRequest)(nil), "CreateDatasetRequest")
	proto.RegisterType((*UpdateDatasetRequest)(nil), "UpdateDatasetRequest")
	proto.RegisterType((*ApiError)(nil), "ApiError")
	proto.RegisterEnum("StatusCode", StatusCode_name, StatusCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Catalog service

type CatalogClient interface {
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error)
	UpdateDataset(ctx context.Context, in *UpdateDatasetRequest, opts ...grpc.CallOption) (*ApiResponse, error)
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
}

type catalogClient struct {
	cc *grpc.ClientConn
}

func NewCatalogClient(cc *grpc.ClientConn) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := grpc.Invoke(ctx, "/Catalog/CreateProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error) {
	out := new(CreateDatasetResponse)
	err := grpc.Invoke(ctx, "/Catalog/CreateDataset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UpdateDataset(ctx context.Context, in *UpdateDatasetRequest, opts ...grpc.CallOption) (*ApiResponse, error) {
	out := new(ApiResponse)
	err := grpc.Invoke(ctx, "/Catalog/UpdateDataset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := grpc.Invoke(ctx, "/Catalog/Stat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Catalog service

type CatalogServer interface {
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	CreateDataset(context.Context, *CreateDatasetRequest) (*CreateDatasetResponse, error)
	UpdateDataset(context.Context, *UpdateDatasetRequest) (*ApiResponse, error)
	Stat(context.Context, *StatRequest) (*StatResponse, error)
}

func RegisterCatalogServer(s *grpc.Server, srv CatalogServer) {
	s.RegisterService(&_Catalog_serviceDesc, srv)
}

func _Catalog_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Catalog/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Catalog/CreateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CreateDataset(ctx, req.(*CreateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UpdateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UpdateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Catalog/UpdateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UpdateDataset(ctx, req.(*UpdateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Catalog/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Catalog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _Catalog_CreateProject_Handler,
		},
		{
			MethodName: "CreateDataset",
			Handler:    _Catalog_CreateDataset_Handler,
		},
		{
			MethodName: "UpdateDataset",
			Handler:    _Catalog_UpdateDataset_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _Catalog_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("mlp_api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 713 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0xdb, 0x6e, 0xf3, 0x44,
	0x10, 0x8e, 0x93, 0x34, 0x87, 0xb1, 0x9d, 0xee, 0xbf, 0x7f, 0xf3, 0x13, 0x45, 0x42, 0x2d, 0x96,
	0x90, 0x0a, 0x17, 0xbe, 0x08, 0x12, 0xd7, 0x6c, 0xbd, 0xdb, 0xd6, 0xd4, 0x59, 0x47, 0x3e, 0x94,
	0x72, 0x65, 0xb9, 0xf5, 0x52, 0x19, 0x25, 0xb5, 0x89, 0x9d, 0x3e, 0x20, 0xaf, 0xc1, 0x2b, 0xf0,
	0x10, 0x68, 0x7d, 0x48, 0x4f, 0x11, 0x42, 0xe2, 0x6e, 0x67, 0x3c, 0xf3, 0xcd, 0x7c, 0x9f, 0x67,
	0x06, 0xf4, 0xcd, 0x3a, 0x8f, 0xe2, 0x3c, 0x35, 0xf3, 0x6d, 0x56, 0x66, 0xf3, 0xd1, 0x73, 0x56,
	0xbf, 0x8c, 0x10, 0x4e, 0xac, 0xad, 0x88, 0x4b, 0xb1, 0xda, 0x66, 0xbf, 0x8b, 0x87, 0xd2, 0x13,
	0x7f, 0xec, 0x44, 0x51, 0x62, 0x0c, 0xfd, 0xa7, 0x78, 0x23, 0x66, 0xca, 0x99, 0x72, 0x3e, 0xf6,
	0xaa, 0x37, 0xfe, 0x0e, 0xfa, 0x1b, 0x51, 0xc6, 0xb3, 0xee, 0x99, 0x72, 0xae, 0x2e, 0xa6, 0x66,
	0x93, 0xb2, 0x14, 0x65, 0x9c, 0xc4, 0x65, 0x4c, 0xc5, 0xba, 0x8c, 0xbd, 0x2a, 0xc4, 0xf8, 0x19,
	0xa6, 0xef, 0x60, 0x8b, 0x3c, 0x7b, 0x2a, 0x04, 0x3e, 0x85, 0x23, 0xb1, 0xdd, 0x66, 0xdb, 0x0a,
	0x58, 0x5d, 0x8c, 0x4d, 0x92, 0xa7, 0x4c, 0x3a, 0xbc, 0xda, 0x8f, 0x11, 0xf4, 0x76, 0x69, 0x52,
	0xd5, 0xd0, 0x3c, 0xf9, 0x7c, 0xc1, 0xa2, 0x71, 0x19, 0x17, 0xe2, 0x7f, 0x61, 0xe9, 0xa0, 0xfa,
	0x65, 0xdc, 0xb2, 0x34, 0xce, 0x41, 0xab, 0xcd, 0x06, 0x71, 0x06, 0xc3, 0x67, 0xb1, 0x2d, 0xd2,
	0xec, 0xa9, 0x21, 0xde, 0x9a, 0x86, 0x09, 0x2a, 0xc9, 0xd3, 0xff, 0x5c, 0xda, 0x78, 0x6e, 0x75,
	0xdd, 0x37, 0x5d, 0xeb, 0x7a, 0x0a, 0x6a, 0x5e, 0x4b, 0x12, 0xc9, 0xd6, 0x94, 0xaa, 0x35, 0x68,
	0x5c, 0x61, 0x9a, 0xec, 0x85, 0xef, 0x1e, 0x10, 0xbe, 0xd7, 0x08, 0xdf, 0x60, 0x1e, 0x12, 0xde,
	0x87, 0x93, 0x30, 0x4f, 0x3e, 0xd6, 0x6d, 0xa4, 0x50, 0xf6, 0x52, 0x7c, 0xf8, 0x9b, 0xff, 0x02,
	0xfa, 0xa7, 0x02, 0xa3, 0x96, 0x20, 0x3e, 0x85, 0xfe, 0x43, 0x96, 0xd4, 0x93, 0x31, 0x59, 0xa8,
	0xa6, 0x14, 0x70, 0x57, 0x58, 0x59, 0x22, 0xbc, 0xea, 0x83, 0x14, 0x71, 0x23, 0x8a, 0x22, 0x7e,
	0x6c, 0x49, 0xb4, 0xa6, 0x24, 0x5f, 0xec, 0xee, 0xf7, 0xe4, 0x7b, 0x35, 0xf9, 0xc6, 0x25, 0xc9,
	0x7f, 0x03, 0x5a, 0x1b, 0x50, 0x89, 0xd0, 0xaf, 0xf2, 0xdb, 0x24, 0x2e, 0xb5, 0xf8, 0x1a, 0xe0,
	0xb7, 0x54, 0xac, 0x93, 0x3a, 0xe0, 0xa8, 0x0a, 0x18, 0x57, 0x9e, 0xea, 0xf3, 0x0c, 0x86, 0x89,
	0x28, 0xe3, 0x74, 0x5d, 0xcc, 0x06, 0x67, 0x3d, 0x59, 0xbc, 0x31, 0xbf, 0xff, 0xab, 0x0b, 0xf0,
	0xd2, 0x2b, 0x1e, 0x40, 0xd7, 0xbd, 0x41, 0x1d, 0xac, 0xc3, 0xd8, 0x22, 0xdc, 0x62, 0x8e, 0xc3,
	0x28, 0x52, 0xb0, 0x0a, 0xc3, 0x90, 0xdf, 0x70, 0xf7, 0x17, 0x8e, 0xba, 0xf8, 0x04, 0x90, 0xcd,
	0x6f, 0x89, 0x63, 0xd3, 0x88, 0x78, 0x57, 0xe1, 0x92, 0xf1, 0x00, 0xf5, 0xf0, 0x14, 0x3e, 0x51,
	0x46, 0xa8, 0x63, 0x73, 0x16, 0xb1, 0x3b, 0x8b, 0x31, 0xca, 0x28, 0xea, 0x4b, 0x20, 0xee, 0x06,
	0xd1, 0xa5, 0x1b, 0x72, 0x8a, 0x8e, 0x30, 0x86, 0x09, 0x71, 0x3c, 0x46, 0xe8, 0xaf, 0x11, 0xbb,
	0xb3, 0xfd, 0xc0, 0x47, 0x03, 0x99, 0xb9, 0x62, 0xde, 0xd2, 0xf6, 0x7d, 0xdb, 0xe5, 0x11, 0x65,
	0xdc, 0x66, 0x14, 0x0d, 0xf1, 0x67, 0x38, 0x0e, 0x39, 0x09, 0x83, 0x6b, 0xc6, 0x03, 0xdb, 0x22,
	0x01, 0xa3, 0x08, 0xe1, 0x2f, 0x80, 0x3d, 0xe6, 0xbb, 0xa1, 0x67, 0xc9, 0x2a, 0xd7, 0x24, 0xf4,
	0xa5, 0x7f, 0x84, 0xbf, 0x82, 0xcf, 0x97, 0xc4, 0x76, 0x18, 0x8d, 0x56, 0x1e, 0xb3, 0x5c, 0x4e,
	0xed, 0xc0, 0x76, 0x39, 0x1a, 0xcb, 0xce, 0xc9, 0x85, 0xeb, 0xc9, 0x28, 0xc0, 0x08, 0x34, 0x37,
	0x0c, 0x22, 0xf7, 0x32, 0xf2, 0x08, 0xbf, 0x62, 0x48, 0xc5, 0x9f, 0x40, 0x0f, 0xb9, 0xbd, 0x5c,
	0x39, 0x4c, 0xd2, 0x60, 0x14, 0x69, 0x58, 0x83, 0x91, 0xcd, 0x03, 0xe6, 0x71, 0xe2, 0x20, 0x1d,
	0x1f, 0x83, 0x1a, 0x72, 0x72, 0x4b, 0x6c, 0x87, 0x5c, 0x38, 0x0c, 0x4d, 0x24, 0x21, 0x4a, 0x02,
	0x12, 0x39, 0xae, 0xef, 0xa3, 0x63, 0x19, 0x7d, 0x41, 0x68, 0xc4, 0xc9, 0x92, 0xa1, 0x04, 0x4f,
	0x00, 0xe4, 0x2b, 0x0a, 0xc8, 0x0d, 0xe3, 0x48, 0x2c, 0xfe, 0x56, 0x60, 0x68, 0xc5, 0x65, 0xbc,
	0xce, 0x1e, 0xf1, 0x4f, 0xa0, 0xbf, 0x59, 0x7e, 0x3c, 0x35, 0x0f, 0xdd, 0x98, 0xf9, 0x17, 0xf3,
	0xe0, 0x8d, 0x30, 0x3a, 0x2f, 0x08, 0xcd, 0x50, 0xee, 0x11, 0xde, 0x4e, 0xf5, 0x1e, 0xe1, 0xdd,
	0x65, 0x30, 0x3a, 0xf8, 0x47, 0xd0, 0xdf, 0xec, 0x01, 0x9e, 0x9a, 0x87, 0xf6, 0x62, 0xae, 0x99,
	0xaf, 0xd6, 0xda, 0xe8, 0xe0, 0x6f, 0xa1, 0x2f, 0x87, 0x04, 0x6b, 0xe6, 0xab, 0x3b, 0x31, 0xd7,
	0xcd, 0xd7, 0x67, 0xc2, 0xe8, 0xdc, 0x0f, 0xaa, 0xeb, 0xf9, 0xc3, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xbe, 0x54, 0x1c, 0xb5, 0x58, 0x05, 0x00, 0x00,
}
