// Code generated by protoc-gen-go.
// source: test_api.proto
// DO NOT EDIT!

/*
Package test_api is a generated protocol buffer package.

It is generated from these files:
	test_api.proto

It has these top-level messages:
	ApplyRequest
	ApplyResponse
	ScenarioRequest
	Error
	ScenarioResponse
	KillRequest
	PingRequest
	OkResponse
	WipeDatabase
*/
package test_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import events "mlp/catalog/events"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ApplyRequest struct {
	Events []*events.Event `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *ApplyRequest) Reset()                    { *m = ApplyRequest{} }
func (m *ApplyRequest) String() string            { return proto.CompactTextString(m) }
func (*ApplyRequest) ProtoMessage()               {}
func (*ApplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ApplyRequest) GetEvents() []*events.Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type ApplyResponse struct {
	Version uint64 `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
}

func (m *ApplyResponse) Reset()                    { *m = ApplyResponse{} }
func (m *ApplyResponse) String() string            { return proto.CompactTextString(m) }
func (*ApplyResponse) ProtoMessage()               {}
func (*ApplyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ScenarioRequest struct {
	Name      string          `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Events    []*events.Event `protobuf:"bytes,2,rep,name=Events" json:"Events,omitempty"`
	Timestamp int64           `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ScenarioRequest) Reset()                    { *m = ScenarioRequest{} }
func (m *ScenarioRequest) String() string            { return proto.CompactTextString(m) }
func (*ScenarioRequest) ProtoMessage()               {}
func (*ScenarioRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ScenarioRequest) GetEvents() []*events.Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type Error struct {
	Message string `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ScenarioResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=Error" json:"Error,omitempty"`
}

func (m *ScenarioResponse) Reset()                    { *m = ScenarioResponse{} }
func (m *ScenarioResponse) String() string            { return proto.CompactTextString(m) }
func (*ScenarioResponse) ProtoMessage()               {}
func (*ScenarioResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ScenarioResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type KillRequest struct {
}

func (m *KillRequest) Reset()                    { *m = KillRequest{} }
func (m *KillRequest) String() string            { return proto.CompactTextString(m) }
func (*KillRequest) ProtoMessage()               {}
func (*KillRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type OkResponse struct {
}

func (m *OkResponse) Reset()                    { *m = OkResponse{} }
func (m *OkResponse) String() string            { return proto.CompactTextString(m) }
func (*OkResponse) ProtoMessage()               {}
func (*OkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type WipeDatabase struct {
}

func (m *WipeDatabase) Reset()                    { *m = WipeDatabase{} }
func (m *WipeDatabase) String() string            { return proto.CompactTextString(m) }
func (*WipeDatabase) ProtoMessage()               {}
func (*WipeDatabase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*ApplyRequest)(nil), "ApplyRequest")
	proto.RegisterType((*ApplyResponse)(nil), "ApplyResponse")
	proto.RegisterType((*ScenarioRequest)(nil), "ScenarioRequest")
	proto.RegisterType((*Error)(nil), "Error")
	proto.RegisterType((*ScenarioResponse)(nil), "ScenarioResponse")
	proto.RegisterType((*KillRequest)(nil), "KillRequest")
	proto.RegisterType((*PingRequest)(nil), "PingRequest")
	proto.RegisterType((*OkResponse)(nil), "OkResponse")
	proto.RegisterType((*WipeDatabase)(nil), "WipeDatabase")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Test service

type TestClient interface {
	// Setup a given state in the database
	Setup(ctx context.Context, in *ScenarioRequest, opts ...grpc.CallOption) (*OkResponse, error)
	Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*OkResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*OkResponse, error)
	Wipe(ctx context.Context, in *WipeDatabase, opts ...grpc.CallOption) (*OkResponse, error)
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) Setup(ctx context.Context, in *ScenarioRequest, opts ...grpc.CallOption) (*OkResponse, error) {
	out := new(OkResponse)
	err := grpc.Invoke(ctx, "/Test/Setup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*OkResponse, error) {
	out := new(OkResponse)
	err := grpc.Invoke(ctx, "/Test/Kill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*OkResponse, error) {
	out := new(OkResponse)
	err := grpc.Invoke(ctx, "/Test/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) Wipe(ctx context.Context, in *WipeDatabase, opts ...grpc.CallOption) (*OkResponse, error) {
	out := new(OkResponse)
	err := grpc.Invoke(ctx, "/Test/Wipe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error) {
	out := new(ApplyResponse)
	err := grpc.Invoke(ctx, "/Test/Apply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Test service

type TestServer interface {
	// Setup a given state in the database
	Setup(context.Context, *ScenarioRequest) (*OkResponse, error)
	Kill(context.Context, *KillRequest) (*OkResponse, error)
	Ping(context.Context, *PingRequest) (*OkResponse, error)
	Wipe(context.Context, *WipeDatabase) (*OkResponse, error)
	Apply(context.Context, *ApplyRequest) (*ApplyResponse, error)
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Test/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).Setup(ctx, req.(*ScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Test/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).Kill(ctx, req.(*KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Test/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_Wipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WipeDatabase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).Wipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Test/Wipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).Wipe(ctx, req.(*WipeDatabase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Test/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _Test_Setup_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Test_Kill_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Test_Ping_Handler,
		},
		{
			MethodName: "Wipe",
			Handler:    _Test_Wipe_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _Test_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("test_api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0x5f, 0x4f, 0xc2, 0x30,
	0x14, 0xc5, 0x99, 0x0c, 0x0c, 0x97, 0x0d, 0x49, 0x9f, 0x16, 0x42, 0x0c, 0x56, 0x1f, 0xe6, 0x4b,
	0x63, 0xf0, 0x13, 0x98, 0xc8, 0x93, 0xf1, 0x4f, 0x86, 0xd1, 0x47, 0x53, 0xc8, 0x0d, 0x69, 0x84,
	0xb5, 0xb6, 0xc5, 0xc4, 0xaf, 0xe8, 0xa7, 0x32, 0x2d, 0x6b, 0xa8, 0x84, 0xb7, 0x9d, 0xbb, 0xb3,
	0x73, 0x7e, 0xeb, 0x2d, 0x0c, 0x2c, 0x1a, 0xfb, 0xc1, 0x95, 0x60, 0x4a, 0x4b, 0x2b, 0x47, 0x19,
	0x7e, 0x63, 0x6d, 0xcd, 0x4e, 0x51, 0x06, 0xd9, 0x9d, 0x52, 0xeb, 0x9f, 0x0a, 0xbf, 0xb6, 0x68,
	0x2c, 0x39, 0x87, 0xee, 0xcc, 0xbf, 0x2f, 0x92, 0x49, 0xbb, 0xec, 0x4f, 0xbb, 0xcc, 0xcb, 0xaa,
	0x99, 0xd2, 0x6b, 0xc8, 0x1b, 0xbf, 0x51, 0xb2, 0x36, 0x48, 0x0a, 0x38, 0x7d, 0x43, 0x6d, 0x84,
	0xac, 0x8b, 0x64, 0x92, 0x94, 0x69, 0x15, 0x24, 0x5d, 0xc2, 0xd9, 0x7c, 0x89, 0x35, 0xd7, 0x42,
	0x86, 0x74, 0x02, 0xe9, 0x13, 0xdf, 0xa0, 0x77, 0xf6, 0x2a, 0xff, 0x1c, 0x35, 0x9e, 0x1c, 0x6b,
	0x24, 0x63, 0xe8, 0x59, 0xb1, 0x41, 0x63, 0xf9, 0x46, 0x15, 0xed, 0x49, 0x52, 0xb6, 0xab, 0xfd,
	0x80, 0x5e, 0x40, 0x67, 0xa6, 0xb5, 0xd4, 0x8e, 0xe3, 0x11, 0x8d, 0xe1, 0xab, 0x90, 0x1e, 0x24,
	0xbd, 0x81, 0xe1, 0x9e, 0xa3, 0xa1, 0x1e, 0x37, 0x9f, 0x79, 0xaf, 0xef, 0x74, 0xaa, 0xda, 0x0d,
	0x69, 0x0e, 0xfd, 0x07, 0xb1, 0x5e, 0x37, 0xd4, 0x4e, 0xbe, 0x88, 0x7a, 0x15, 0x64, 0x06, 0xf0,
	0xfc, 0x19, 0x92, 0xe8, 0x00, 0xb2, 0x77, 0xa1, 0xf0, 0x9e, 0x5b, 0xbe, 0xe0, 0x06, 0xa7, 0xbf,
	0x09, 0xa4, 0xaf, 0xee, 0x5f, 0x4b, 0xe8, 0xcc, 0xd1, 0x6e, 0x15, 0x19, 0xb2, 0x83, 0x63, 0x18,
	0xf5, 0x59, 0x14, 0xd0, 0x22, 0x97, 0x90, 0xba, 0x3a, 0x92, 0xb1, 0xa8, 0xf5, 0x88, 0xc9, 0x41,
	0x90, 0x8c, 0x45, 0x2c, 0x87, 0xa6, 0x2b, 0x48, 0x1d, 0x0c, 0xc9, 0x59, 0xcc, 0x74, 0xe8, 0x2a,
	0xa1, 0xe3, 0x77, 0x48, 0x72, 0x16, 0xef, 0x7e, 0x34, 0x60, 0xff, 0x56, 0x4b, 0x5b, 0x8b, 0xae,
	0xbf, 0x24, 0xb7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x59, 0x13, 0xf3, 0x1e, 0x44, 0x02, 0x00,
	0x00,
}
