// Code generated by protoc-gen-go.
// source: vo.proto
// DO NOT EDIT!

/*
Package vo is a generated protocol buffer package.

It is generated from these files:
	vo.proto

It has these top-level messages:
	ProjectMetadataDelta
	ServiceMetadataDelta
	DatasetMetadataDelta
	DatasetSample
*/
package vo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Sample storage format. Doesn't necessarily match
// actual data format which could be very cryptic
type DatasetSample_FORMAT int32

const (
	DatasetSample_TEXT DatasetSample_FORMAT = 0
	DatasetSample_TSV  DatasetSample_FORMAT = 1
	DatasetSample_JSON DatasetSample_FORMAT = 2
)

var DatasetSample_FORMAT_name = map[int32]string{
	0: "TEXT",
	1: "TSV",
	2: "JSON",
}
var DatasetSample_FORMAT_value = map[string]int32{
	"TEXT": 0,
	"TSV":  1,
	"JSON": 2,
}

func (x DatasetSample_FORMAT) String() string {
	return proto.EnumName(DatasetSample_FORMAT_name, int32(x))
}
func (DatasetSample_FORMAT) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type ProjectMetadataDelta struct {
	Name           string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NameSet        bool   `protobuf:"varint,2,opt,name=name_set,json=nameSet" json:"name_set,omitempty"`
	Description    string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	DescriptionSet bool   `protobuf:"varint,4,opt,name=description_set,json=descriptionSet" json:"description_set,omitempty"`
}

func (m *ProjectMetadataDelta) Reset()                    { *m = ProjectMetadataDelta{} }
func (m *ProjectMetadataDelta) String() string            { return proto.CompactTextString(m) }
func (*ProjectMetadataDelta) ProtoMessage()               {}
func (*ProjectMetadataDelta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServiceMetadataDelta struct {
	ServiceName    string   `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	ServiceNameSet bool     `protobuf:"varint,2,opt,name=service_name_set,json=serviceNameSet" json:"service_name_set,omitempty"`
	LocationId     string   `protobuf:"bytes,3,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	LocationIdSet  bool     `protobuf:"varint,4,opt,name=location_id_set,json=locationIdSet" json:"location_id_set,omitempty"`
	LocationUri    string   `protobuf:"bytes,5,opt,name=location_uri,json=locationUri" json:"location_uri,omitempty"`
	LocationUriSet bool     `protobuf:"varint,6,opt,name=location_uri_set,json=locationUriSet" json:"location_uri_set,omitempty"`
	Description    string   `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	DescriptionSet bool     `protobuf:"varint,8,opt,name=description_set,json=descriptionSet" json:"description_set,omitempty"`
	Experts        []string `protobuf:"bytes,9,rep,name=experts" json:"experts,omitempty"`
	ExpertsSet     bool     `protobuf:"varint,10,opt,name=experts_set,json=expertsSet" json:"experts_set,omitempty"`
}

func (m *ServiceMetadataDelta) Reset()                    { *m = ServiceMetadataDelta{} }
func (m *ServiceMetadataDelta) String() string            { return proto.CompactTextString(m) }
func (*ServiceMetadataDelta) ProtoMessage()               {}
func (*ServiceMetadataDelta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// if a field kind is set, then the corresponding property carries
// a new value (which could be null)
type DatasetMetadataDelta struct {
	RecordCount        int64          `protobuf:"varint,1,opt,name=record_count,json=recordCount" json:"record_count,omitempty"`
	RecordCountSet     bool           `protobuf:"varint,2,opt,name=record_count_set,json=recordCountSet" json:"record_count_set,omitempty"`
	FileCount          int64          `protobuf:"varint,3,opt,name=file_count,json=fileCount" json:"file_count,omitempty"`
	FileCountSet       bool           `protobuf:"varint,4,opt,name=file_count_set,json=fileCountSet" json:"file_count_set,omitempty"`
	StorageBytes       int64          `protobuf:"varint,5,opt,name=storage_bytes,json=storageBytes" json:"storage_bytes,omitempty"`
	StorageBytesSet    bool           `protobuf:"varint,6,opt,name=storage_bytes_set,json=storageBytesSet" json:"storage_bytes_set,omitempty"`
	Sample             *DatasetSample `protobuf:"bytes,7,opt,name=sample" json:"sample,omitempty"`
	SampleSet          bool           `protobuf:"varint,8,opt,name=sample_set,json=sampleSet" json:"sample_set,omitempty"`
	UpdateTimestamp    int64          `protobuf:"varint,9,opt,name=update_timestamp,json=updateTimestamp" json:"update_timestamp,omitempty"`
	UpdateTimestampSet bool           `protobuf:"varint,10,opt,name=update_timestamp_set,json=updateTimestampSet" json:"update_timestamp_set,omitempty"`
	DataFormat         string         `protobuf:"bytes,11,opt,name=data_format,json=dataFormat" json:"data_format,omitempty"`
	DataFormatSet      bool           `protobuf:"varint,12,opt,name=data_format_set,json=dataFormatSet" json:"data_format_set,omitempty"`
	Description        string         `protobuf:"bytes,13,opt,name=description" json:"description,omitempty"`
	DescriptionSet     bool           `protobuf:"varint,14,opt,name=description_set,json=descriptionSet" json:"description_set,omitempty"`
	LocationId         string         `protobuf:"bytes,15,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	LocationIdSet      bool           `protobuf:"varint,16,opt,name=location_id_set,json=locationIdSet" json:"location_id_set,omitempty"`
	LocationUri        string         `protobuf:"bytes,17,opt,name=location_uri,json=locationUri" json:"location_uri,omitempty"`
	LocationUriSet     bool           `protobuf:"varint,18,opt,name=location_uri_set,json=locationUriSet" json:"location_uri_set,omitempty"`
	Experts            []string       `protobuf:"bytes,19,rep,name=experts" json:"experts,omitempty"`
	ExpertsSet         bool           `protobuf:"varint,20,opt,name=experts_set,json=expertsSet" json:"experts_set,omitempty"`
	Name               string         `protobuf:"bytes,21,opt,name=name" json:"name,omitempty"`
	NameSet            bool           `protobuf:"varint,22,opt,name=name_set,json=nameSet" json:"name_set,omitempty"`
}

func (m *DatasetMetadataDelta) Reset()                    { *m = DatasetMetadataDelta{} }
func (m *DatasetMetadataDelta) String() string            { return proto.CompactTextString(m) }
func (*DatasetMetadataDelta) ProtoMessage()               {}
func (*DatasetMetadataDelta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DatasetMetadataDelta) GetSample() *DatasetSample {
	if m != nil {
		return m.Sample
	}
	return nil
}

type DatasetSample struct {
	Format DatasetSample_FORMAT `protobuf:"varint,1,opt,name=format,enum=DatasetSample_FORMAT" json:"format,omitempty"`
	Body   string               `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *DatasetSample) Reset()                    { *m = DatasetSample{} }
func (m *DatasetSample) String() string            { return proto.CompactTextString(m) }
func (*DatasetSample) ProtoMessage()               {}
func (*DatasetSample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*ProjectMetadataDelta)(nil), "ProjectMetadataDelta")
	proto.RegisterType((*ServiceMetadataDelta)(nil), "ServiceMetadataDelta")
	proto.RegisterType((*DatasetMetadataDelta)(nil), "DatasetMetadataDelta")
	proto.RegisterType((*DatasetSample)(nil), "DatasetSample")
	proto.RegisterEnum("DatasetSample_FORMAT", DatasetSample_FORMAT_name, DatasetSample_FORMAT_value)
}

func init() { proto.RegisterFile("vo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0xd1, 0x8e, 0xd2, 0x40,
	0x14, 0x15, 0x8a, 0x85, 0xde, 0x42, 0xe9, 0x8e, 0xac, 0xa9, 0x0f, 0x46, 0x16, 0x75, 0x45, 0x13,
	0x89, 0x59, 0xbf, 0x40, 0x5d, 0x37, 0xd1, 0x64, 0x77, 0x4d, 0x8b, 0xc6, 0xb7, 0x66, 0x68, 0x67,
	0x4d, 0x0d, 0x30, 0xcd, 0x74, 0xd8, 0xc8, 0x5f, 0xf8, 0x2b, 0x7e, 0xa1, 0xe6, 0xce, 0x0c, 0x30,
	0x20, 0x1a, 0x9e, 0x98, 0x39, 0x3d, 0x73, 0x38, 0x73, 0xef, 0x3d, 0x03, 0xad, 0x5b, 0x3e, 0x2a,
	0x05, 0x97, 0x7c, 0xf0, 0xb3, 0x06, 0xbd, 0x4f, 0x82, 0x7f, 0x67, 0x99, 0xbc, 0x64, 0x92, 0xe6,
	0x54, 0xd2, 0x73, 0x36, 0x95, 0x94, 0x10, 0x68, 0xcc, 0xe9, 0x8c, 0x45, 0xb5, 0x7e, 0x6d, 0xe8,
	0xc5, 0x6a, 0x4d, 0x1e, 0x40, 0x0b, 0x7f, 0xd3, 0x8a, 0xc9, 0xa8, 0xde, 0xaf, 0x0d, 0x5b, 0x71,
	0x13, 0xf7, 0x09, 0x93, 0xa4, 0x0f, 0x7e, 0xce, 0xaa, 0x4c, 0x14, 0xa5, 0x2c, 0xf8, 0x3c, 0x72,
	0xd4, 0x29, 0x1b, 0x22, 0xcf, 0xa0, 0x6b, 0x6d, 0x95, 0x46, 0x43, 0x69, 0x04, 0x16, 0x9c, 0x30,
	0x39, 0xf8, 0x5d, 0x87, 0x5e, 0xc2, 0xc4, 0x6d, 0x91, 0xb1, 0x6d, 0x4b, 0x27, 0xd0, 0xae, 0x34,
	0x9e, 0x5a, 0xd6, 0x7c, 0x83, 0x5d, 0xa1, 0xc3, 0x21, 0x84, 0x36, 0xc5, 0x72, 0x1a, 0x58, 0x34,
	0x34, 0xfc, 0x08, 0xfc, 0x29, 0xcf, 0xa8, 0xf2, 0x52, 0xe4, 0xc6, 0x30, 0xac, 0xa0, 0x0f, 0x39,
	0x39, 0x85, 0xae, 0x45, 0xb0, 0xfc, 0x76, 0x36, 0x24, 0x14, 0x3a, 0x81, 0xf6, 0x9a, 0xb7, 0x10,
	0x45, 0x74, 0x57, 0xbb, 0x5a, 0x61, 0x9f, 0x45, 0x81, 0xae, 0x6c, 0x8a, 0xd2, 0x72, 0xb5, 0x2b,
	0x8b, 0xb6, 0xa7, 0x8c, 0xcd, 0x83, 0xca, 0xd8, 0xda, 0x57, 0x46, 0x12, 0x41, 0x93, 0xfd, 0x28,
	0x99, 0x90, 0x55, 0xe4, 0xf5, 0x9d, 0xa1, 0x17, 0xaf, 0xb6, 0x78, 0x75, 0xb3, 0x54, 0xc7, 0x41,
	0x1d, 0x07, 0x03, 0x61, 0x07, 0x7e, 0xb9, 0xd0, 0x3b, 0xa7, 0x92, 0x56, 0x4c, 0xfe, 0xd5, 0x01,
	0xc1, 0x32, 0x2e, 0xf2, 0x34, 0xe3, 0x8b, 0xb9, 0x54, 0x1d, 0x70, 0x62, 0x5f, 0x63, 0xef, 0x10,
	0xc2, 0xbb, 0xda, 0x14, 0xbb, 0x03, 0x16, 0x0d, 0x0d, 0x3e, 0x04, 0xb8, 0x29, 0xa6, 0xcc, 0x48,
	0x39, 0x4a, 0xca, 0x43, 0x44, 0x0b, 0x3d, 0x81, 0x60, 0xf3, 0xd9, 0x2a, 0x7f, 0x7b, 0x4d, 0x41,
	0x91, 0xc7, 0xd0, 0xa9, 0x24, 0x17, 0xf4, 0x1b, 0x4b, 0x27, 0x4b, 0xc9, 0x2a, 0x55, 0x7e, 0x27,
	0x6e, 0x1b, 0xf0, 0x2d, 0x62, 0xe4, 0x05, 0x1c, 0x6d, 0x91, 0xac, 0x06, 0x74, 0x6d, 0x22, 0x0a,
	0x9e, 0x82, 0x5b, 0xd1, 0x59, 0x39, 0x65, 0xaa, 0xf8, 0xfe, 0x59, 0x30, 0x32, 0x95, 0x48, 0x14,
	0x1a, 0x9b, 0xaf, 0xe8, 0x5e, 0xaf, 0xac, 0x16, 0x78, 0x1a, 0x41, 0x99, 0xe7, 0x10, 0x2e, 0xca,
	0x9c, 0x4a, 0x96, 0xca, 0x62, 0xc6, 0x2a, 0x49, 0x67, 0x65, 0xe4, 0x29, 0x6b, 0x5d, 0x8d, 0x8f,
	0x57, 0x30, 0x79, 0x05, 0xbd, 0x5d, 0xaa, 0xd5, 0x17, 0xb2, 0x43, 0x37, 0xb3, 0x8b, 0x3d, 0x49,
	0x6f, 0xb8, 0x98, 0x51, 0x19, 0xf9, 0x7a, 0x76, 0x11, 0xba, 0x50, 0x08, 0xce, 0xae, 0x45, 0x50,
	0x6a, 0x6d, 0x3d, 0xbb, 0x1b, 0xd2, 0x9e, 0x71, 0xeb, 0x1c, 0x34, 0x6e, 0xc1, 0xde, 0x71, 0xdb,
	0xc9, 0x53, 0xf7, 0x90, 0x3c, 0x85, 0x87, 0xe4, 0xe9, 0xe8, 0xb0, 0x3c, 0x91, 0xbd, 0x79, 0xb2,
	0x42, 0x70, 0xef, 0xbf, 0x21, 0xe8, 0xed, 0x86, 0x60, 0xfd, 0x00, 0x1e, 0xff, 0xe3, 0x01, 0xbc,
	0xbf, 0xf5, 0x00, 0x0e, 0x96, 0xd0, 0xd9, 0x1a, 0x14, 0xf2, 0x12, 0x5c, 0xd3, 0x1f, 0x4c, 0x49,
	0x70, 0x76, 0xbc, 0x3d, 0x48, 0xa3, 0x8b, 0xeb, 0xf8, 0xf2, 0xcd, 0x38, 0x36, 0x24, 0xfc, 0xbb,
	0x09, 0xcf, 0x97, 0x2a, 0x2b, 0x5e, 0xac, 0xd6, 0x83, 0xa7, 0xe0, 0x6a, 0x16, 0x69, 0x41, 0x63,
	0xfc, 0xfe, 0xeb, 0x38, 0xbc, 0x43, 0x9a, 0xe0, 0x8c, 0x93, 0x2f, 0x61, 0x0d, 0xa1, 0x8f, 0xc9,
	0xf5, 0x55, 0x58, 0x9f, 0xb8, 0xea, 0x29, 0x7f, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0x61, 0x4b,
	0x11, 0xbe, 0xd6, 0x05, 0x00, 0x00,
}
