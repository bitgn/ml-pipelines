// Code generated by protoc-gen-go.
// source: vo.proto
// DO NOT EDIT!

/*
Package vo is a generated protocol buffer package.

It is generated from these files:
	vo.proto

It has these top-level messages:
	ProjectMetadataDelta
	ServiceMetadataDelta
	ExpertMetadataDelta
	Relation
	JobMetadataDelta
	JobInput
	JobOutput
	DatasetMetadataDelta
	DatasetSample
*/
package vo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ENTITY int32

const (
	ENTITY_NONE    ENTITY = 0
	ENTITY_DATASET ENTITY = 1
	ENTITY_JOB     ENTITY = 2
	ENTITY_SERVICE ENTITY = 3
	ENTITY_MODEL   ENTITY = 4
	ENTITY_PROJECT ENTITY = 5
)

var ENTITY_name = map[int32]string{
	0: "NONE",
	1: "DATASET",
	2: "JOB",
	3: "SERVICE",
	4: "MODEL",
	5: "PROJECT",
}
var ENTITY_value = map[string]int32{
	"NONE":    0,
	"DATASET": 1,
	"JOB":     2,
	"SERVICE": 3,
	"MODEL":   4,
	"PROJECT": 5,
}

func (x ENTITY) String() string {
	return proto.EnumName(ENTITY_name, int32(x))
}
func (ENTITY) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type JobInput_Type int32

const (
	JobInput_None    JobInput_Type = 0
	JobInput_Dataset JobInput_Type = 1
)

var JobInput_Type_name = map[int32]string{
	0: "None",
	1: "Dataset",
}
var JobInput_Type_value = map[string]int32{
	"None":    0,
	"Dataset": 1,
}

func (x JobInput_Type) String() string {
	return proto.EnumName(JobInput_Type_name, int32(x))
}
func (JobInput_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type JobOutput_Type int32

const (
	JobOutput_None    JobOutput_Type = 0
	JobOutput_Dataset JobOutput_Type = 1
)

var JobOutput_Type_name = map[int32]string{
	0: "None",
	1: "Dataset",
}
var JobOutput_Type_value = map[string]int32{
	"None":    0,
	"Dataset": 1,
}

func (x JobOutput_Type) String() string {
	return proto.EnumName(JobOutput_Type_name, int32(x))
}
func (JobOutput_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

// Sample storage format. Doesn't necessarily match
// actual data format which could be very cryptic
type DatasetSample_FORMAT int32

const (
	DatasetSample_TEXT DatasetSample_FORMAT = 0
	DatasetSample_TSV  DatasetSample_FORMAT = 1
	DatasetSample_JSON DatasetSample_FORMAT = 2
)

var DatasetSample_FORMAT_name = map[int32]string{
	0: "TEXT",
	1: "TSV",
	2: "JSON",
}
var DatasetSample_FORMAT_value = map[string]int32{
	"TEXT": 0,
	"TSV":  1,
	"JSON": 2,
}

func (x DatasetSample_FORMAT) String() string {
	return proto.EnumName(DatasetSample_FORMAT_name, int32(x))
}
func (DatasetSample_FORMAT) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

type ProjectMetadataDelta struct {
	Title          string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	TitleSet       bool   `protobuf:"varint,2,opt,name=title_set,json=titleSet" json:"title_set,omitempty"`
	Description    string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	DescriptionSet bool   `protobuf:"varint,4,opt,name=description_set,json=descriptionSet" json:"description_set,omitempty"`
}

func (m *ProjectMetadataDelta) Reset()                    { *m = ProjectMetadataDelta{} }
func (m *ProjectMetadataDelta) String() string            { return proto.CompactTextString(m) }
func (*ProjectMetadataDelta) ProtoMessage()               {}
func (*ProjectMetadataDelta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServiceMetadataDelta struct {
	Title          string   `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	TitleSet       bool     `protobuf:"varint,2,opt,name=title_set,json=titleSet" json:"title_set,omitempty"`
	LocationId     string   `protobuf:"bytes,3,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	LocationIdSet  bool     `protobuf:"varint,4,opt,name=location_id_set,json=locationIdSet" json:"location_id_set,omitempty"`
	LocationUri    string   `protobuf:"bytes,5,opt,name=location_uri,json=locationUri" json:"location_uri,omitempty"`
	LocationUriSet bool     `protobuf:"varint,6,opt,name=location_uri_set,json=locationUriSet" json:"location_uri_set,omitempty"`
	Description    string   `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	DescriptionSet bool     `protobuf:"varint,8,opt,name=description_set,json=descriptionSet" json:"description_set,omitempty"`
	Experts        []string `protobuf:"bytes,9,rep,name=experts" json:"experts,omitempty"`
	ExpertsSet     bool     `protobuf:"varint,10,opt,name=experts_set,json=expertsSet" json:"experts_set,omitempty"`
}

func (m *ServiceMetadataDelta) Reset()                    { *m = ServiceMetadataDelta{} }
func (m *ServiceMetadataDelta) String() string            { return proto.CompactTextString(m) }
func (*ServiceMetadataDelta) ProtoMessage()               {}
func (*ServiceMetadataDelta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ExpertMetadataDelta struct {
	FullName    string `protobuf:"bytes,1,opt,name=full_name,json=fullName" json:"full_name,omitempty"`
	FullNameSet bool   `protobuf:"varint,2,opt,name=full_name_set,json=fullNameSet" json:"full_name_set,omitempty"`
	Email       string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	EmailSet    bool   `protobuf:"varint,4,opt,name=email_set,json=emailSet" json:"email_set,omitempty"`
}

func (m *ExpertMetadataDelta) Reset()                    { *m = ExpertMetadataDelta{} }
func (m *ExpertMetadataDelta) String() string            { return proto.CompactTextString(m) }
func (*ExpertMetadataDelta) ProtoMessage()               {}
func (*ExpertMetadataDelta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Relation struct {
	TargetId   []byte `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TargetType ENTITY `protobuf:"varint,2,opt,name=target_type,json=targetType,enum=ENTITY" json:"target_type,omitempty"`
}

func (m *Relation) Reset()                    { *m = Relation{} }
func (m *Relation) String() string            { return proto.CompactTextString(m) }
func (*Relation) ProtoMessage()               {}
func (*Relation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type JobMetadataDelta struct {
	Title    string       `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	TitleSet bool         `protobuf:"varint,2,opt,name=title_set,json=titleSet" json:"title_set,omitempty"`
	Inputs   []*JobInput  `protobuf:"bytes,3,rep,name=inputs" json:"inputs,omitempty"`
	Outputs  []*JobOutput `protobuf:"bytes,4,rep,name=outputs" json:"outputs,omitempty"`
}

func (m *JobMetadataDelta) Reset()                    { *m = JobMetadataDelta{} }
func (m *JobMetadataDelta) String() string            { return proto.CompactTextString(m) }
func (*JobMetadataDelta) ProtoMessage()               {}
func (*JobMetadataDelta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *JobMetadataDelta) GetInputs() []*JobInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *JobMetadataDelta) GetOutputs() []*JobOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type JobInput struct {
	// dataset
	SourceId []byte        `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	Type     JobInput_Type `protobuf:"varint,2,opt,name=type,enum=JobInput_Type" json:"type,omitempty"`
}

func (m *JobInput) Reset()                    { *m = JobInput{} }
func (m *JobInput) String() string            { return proto.CompactTextString(m) }
func (*JobInput) ProtoMessage()               {}
func (*JobInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type JobOutput struct {
	// dataset
	TargetId []byte         `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Type     JobOutput_Type `protobuf:"varint,2,opt,name=type,enum=JobOutput_Type" json:"type,omitempty"`
}

func (m *JobOutput) Reset()                    { *m = JobOutput{} }
func (m *JobOutput) String() string            { return proto.CompactTextString(m) }
func (*JobOutput) ProtoMessage()               {}
func (*JobOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// if a field kind is set, then the corresponding property carries
// a new value (which could be null)
type DatasetMetadataDelta struct {
	RecordCount        int64          `protobuf:"varint,1,opt,name=record_count,json=recordCount" json:"record_count,omitempty"`
	RecordCountSet     bool           `protobuf:"varint,2,opt,name=record_count_set,json=recordCountSet" json:"record_count_set,omitempty"`
	FileCount          int64          `protobuf:"varint,3,opt,name=file_count,json=fileCount" json:"file_count,omitempty"`
	FileCountSet       bool           `protobuf:"varint,4,opt,name=file_count_set,json=fileCountSet" json:"file_count_set,omitempty"`
	StorageBytes       int64          `protobuf:"varint,5,opt,name=storage_bytes,json=storageBytes" json:"storage_bytes,omitempty"`
	StorageBytesSet    bool           `protobuf:"varint,6,opt,name=storage_bytes_set,json=storageBytesSet" json:"storage_bytes_set,omitempty"`
	Sample             *DatasetSample `protobuf:"bytes,7,opt,name=sample" json:"sample,omitempty"`
	SampleSet          bool           `protobuf:"varint,8,opt,name=sample_set,json=sampleSet" json:"sample_set,omitempty"`
	UpdateTimestamp    int64          `protobuf:"varint,9,opt,name=update_timestamp,json=updateTimestamp" json:"update_timestamp,omitempty"`
	UpdateTimestampSet bool           `protobuf:"varint,10,opt,name=update_timestamp_set,json=updateTimestampSet" json:"update_timestamp_set,omitempty"`
	DataFormat         string         `protobuf:"bytes,11,opt,name=data_format,json=dataFormat" json:"data_format,omitempty"`
	DataFormatSet      bool           `protobuf:"varint,12,opt,name=data_format_set,json=dataFormatSet" json:"data_format_set,omitempty"`
	Description        string         `protobuf:"bytes,13,opt,name=description" json:"description,omitempty"`
	DescriptionSet     bool           `protobuf:"varint,14,opt,name=description_set,json=descriptionSet" json:"description_set,omitempty"`
	LocationId         string         `protobuf:"bytes,15,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	LocationIdSet      bool           `protobuf:"varint,16,opt,name=location_id_set,json=locationIdSet" json:"location_id_set,omitempty"`
	LocationUri        string         `protobuf:"bytes,17,opt,name=location_uri,json=locationUri" json:"location_uri,omitempty"`
	LocationUriSet     bool           `protobuf:"varint,18,opt,name=location_uri_set,json=locationUriSet" json:"location_uri_set,omitempty"`
	Experts            [][]byte       `protobuf:"bytes,19,rep,name=experts,proto3" json:"experts,omitempty"`
	ExpertsSet         bool           `protobuf:"varint,20,opt,name=experts_set,json=expertsSet" json:"experts_set,omitempty"`
	Title              string         `protobuf:"bytes,21,opt,name=title" json:"title,omitempty"`
	TitleSet           bool           `protobuf:"varint,22,opt,name=title_set,json=titleSet" json:"title_set,omitempty"`
}

func (m *DatasetMetadataDelta) Reset()                    { *m = DatasetMetadataDelta{} }
func (m *DatasetMetadataDelta) String() string            { return proto.CompactTextString(m) }
func (*DatasetMetadataDelta) ProtoMessage()               {}
func (*DatasetMetadataDelta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DatasetMetadataDelta) GetSample() *DatasetSample {
	if m != nil {
		return m.Sample
	}
	return nil
}

type DatasetSample struct {
	Format DatasetSample_FORMAT `protobuf:"varint,1,opt,name=format,enum=DatasetSample_FORMAT" json:"format,omitempty"`
	Body   string               `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *DatasetSample) Reset()                    { *m = DatasetSample{} }
func (m *DatasetSample) String() string            { return proto.CompactTextString(m) }
func (*DatasetSample) ProtoMessage()               {}
func (*DatasetSample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*ProjectMetadataDelta)(nil), "ProjectMetadataDelta")
	proto.RegisterType((*ServiceMetadataDelta)(nil), "ServiceMetadataDelta")
	proto.RegisterType((*ExpertMetadataDelta)(nil), "ExpertMetadataDelta")
	proto.RegisterType((*Relation)(nil), "Relation")
	proto.RegisterType((*JobMetadataDelta)(nil), "JobMetadataDelta")
	proto.RegisterType((*JobInput)(nil), "JobInput")
	proto.RegisterType((*JobOutput)(nil), "JobOutput")
	proto.RegisterType((*DatasetMetadataDelta)(nil), "DatasetMetadataDelta")
	proto.RegisterType((*DatasetSample)(nil), "DatasetSample")
	proto.RegisterEnum("ENTITY", ENTITY_name, ENTITY_value)
	proto.RegisterEnum("JobInput_Type", JobInput_Type_name, JobInput_Type_value)
	proto.RegisterEnum("JobOutput_Type", JobOutput_Type_name, JobOutput_Type_value)
	proto.RegisterEnum("DatasetSample_FORMAT", DatasetSample_FORMAT_name, DatasetSample_FORMAT_value)
}

func init() { proto.RegisterFile("vo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 848 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x56, 0xdb, 0x8e, 0xdb, 0x36,
	0x10, 0x8d, 0x56, 0xbe, 0x48, 0x23, 0x5f, 0x14, 0xc6, 0x29, 0x04, 0x04, 0x41, 0xbd, 0x4a, 0x9a,
	0xba, 0x01, 0x6a, 0x14, 0xdb, 0x2f, 0xd8, 0xec, 0x2a, 0x80, 0x8d, 0xae, 0x9d, 0xd2, 0x6a, 0xd0,
	0x3e, 0x19, 0xb4, 0xc5, 0x0d, 0x14, 0xc8, 0xa6, 0x20, 0xd1, 0x41, 0xfd, 0x09, 0x7d, 0xe9, 0x53,
	0x7f, 0xa5, 0x9f, 0xd4, 0xff, 0x28, 0x38, 0x94, 0x6d, 0x7a, 0xe1, 0x14, 0x2e, 0xf2, 0x46, 0x9e,
	0x39, 0x9c, 0x19, 0x1e, 0x6a, 0x0e, 0x04, 0xce, 0x27, 0x31, 0xcc, 0x0b, 0x21, 0x45, 0xf8, 0x97,
	0x05, 0xbd, 0x77, 0x85, 0xf8, 0xc8, 0x97, 0xf2, 0x8e, 0x4b, 0x96, 0x30, 0xc9, 0x6e, 0x79, 0x26,
	0x19, 0xe9, 0x41, 0x5d, 0xa6, 0x32, 0xe3, 0x81, 0xd5, 0xb7, 0x06, 0x2e, 0xd5, 0x1b, 0xf2, 0x0c,
	0x5c, 0x5c, 0xcc, 0x4b, 0x2e, 0x83, 0x8b, 0xbe, 0x35, 0x70, 0xa8, 0x83, 0xc0, 0x8c, 0x4b, 0xd2,
	0x07, 0x2f, 0xe1, 0xe5, 0xb2, 0x48, 0x73, 0x99, 0x8a, 0x75, 0x60, 0xe3, 0x41, 0x13, 0x22, 0xdf,
	0x42, 0xd7, 0xd8, 0x62, 0x92, 0x1a, 0x26, 0xe9, 0x18, 0xf0, 0x8c, 0xcb, 0xf0, 0x9f, 0x0b, 0xe8,
	0xcd, 0x78, 0xf1, 0x29, 0x5d, 0xf2, 0x2f, 0x6e, 0xeb, 0x6b, 0xf0, 0x32, 0xb1, 0x64, 0x58, 0x31,
	0x4d, 0xaa, 0xb6, 0x60, 0x07, 0x8d, 0x12, 0xf2, 0x0a, 0xba, 0x06, 0xc1, 0xe8, 0xaa, 0x7d, 0x20,
	0xa9, 0x44, 0x97, 0xd0, 0xda, 0xf3, 0x36, 0x45, 0x1a, 0xd4, 0xf5, 0x05, 0x77, 0xd8, 0x2f, 0x45,
	0x4a, 0x06, 0xe0, 0x9b, 0x14, 0xcc, 0xd5, 0xd0, 0x37, 0x34, 0x68, 0x27, 0xc4, 0x6a, 0x9e, 0x25,
	0x96, 0x73, 0x4a, 0x2c, 0x12, 0x40, 0x93, 0xff, 0x9e, 0xf3, 0x42, 0x96, 0x81, 0xdb, 0xb7, 0x07,
	0x2e, 0xdd, 0x6d, 0xd5, 0xd5, 0xab, 0x25, 0x1e, 0x07, 0x3c, 0x0e, 0x15, 0xa4, 0x74, 0xfe, 0xc3,
	0x82, 0x27, 0x11, 0x6e, 0x8f, 0x65, 0x7e, 0x06, 0xee, 0xfd, 0x26, 0xcb, 0xe6, 0x6b, 0xb6, 0xda,
	0x49, 0xed, 0x28, 0x60, 0xc2, 0x56, 0x9c, 0x84, 0xd0, 0xde, 0x07, 0x0d, 0xc5, 0xbd, 0x1d, 0x41,
	0xf5, 0xd4, 0x83, 0x3a, 0x5f, 0xb1, 0x34, 0xab, 0xe4, 0xd6, 0x1b, 0x95, 0x16, 0x17, 0x86, 0xc6,
	0x0e, 0x02, 0xaa, 0x97, 0x9f, 0xc1, 0xa1, 0x3c, 0x43, 0x8d, 0xf0, 0x41, 0x59, 0xf1, 0x81, 0x4b,
	0xf5, 0x62, 0xaa, 0x7e, 0x8b, 0x3a, 0x1a, 0x18, 0x25, 0x64, 0x00, 0x5e, 0x15, 0x94, 0xdb, 0x9c,
	0x63, 0xf5, 0xce, 0x55, 0x73, 0x18, 0x4d, 0xe2, 0x51, 0xfc, 0x1b, 0x05, 0x1d, 0x8b, 0xb7, 0x39,
	0x0f, 0xff, 0xb4, 0xc0, 0x1f, 0x8b, 0xc5, 0x17, 0x7f, 0x42, 0x97, 0xd0, 0x48, 0xd7, 0xf9, 0x46,
	0x96, 0x81, 0xdd, 0xb7, 0x07, 0xde, 0x95, 0x3b, 0x1c, 0x8b, 0xc5, 0x48, 0x21, 0xb4, 0x0a, 0x90,
	0x97, 0xd0, 0x14, 0x1b, 0x89, 0x9c, 0x1a, 0x72, 0x40, 0x71, 0xa6, 0x08, 0xd1, 0x5d, 0x28, 0xfc,
	0x08, 0xce, 0xee, 0xa4, 0xaa, 0x58, 0x8a, 0x4d, 0xb1, 0xe4, 0xc6, 0x1d, 0x35, 0x30, 0x4a, 0x48,
	0x08, 0x35, 0xe3, 0x72, 0x9d, 0x7d, 0xbd, 0xa1, 0xba, 0x17, 0xc5, 0x58, 0xf8, 0x1c, 0x6a, 0x6a,
	0x47, 0x1c, 0xa8, 0x4d, 0xc4, 0x9a, 0xfb, 0x8f, 0x88, 0x07, 0xcd, 0x5b, 0x26, 0x59, 0xc9, 0xa5,
	0x6f, 0x85, 0x19, 0xb8, 0xfb, 0x0e, 0xfe, 0x5b, 0xd0, 0x17, 0x47, 0xc5, 0xba, 0x87, 0xc6, 0xff,
	0x47, 0xb5, 0xbf, 0x1b, 0xd0, 0xab, 0x76, 0xc7, 0x72, 0x5f, 0x42, 0xab, 0xe0, 0x4b, 0x51, 0x24,
	0xf3, 0xa5, 0xd8, 0xac, 0x25, 0x16, 0xb7, 0xa9, 0xa7, 0xb1, 0x1b, 0x05, 0xa9, 0xa9, 0x31, 0x29,
	0xc6, 0x13, 0x74, 0x0c, 0x9a, 0x7a, 0x88, 0xe7, 0x00, 0xf7, 0x69, 0xc6, 0xab, 0x54, 0x36, 0xa6,
	0x72, 0x15, 0xa2, 0x13, 0xbd, 0x84, 0xce, 0x21, 0x6c, 0x7c, 0x64, 0xad, 0x3d, 0x45, 0x25, 0x79,
	0x01, 0xed, 0x52, 0x8a, 0x82, 0x7d, 0xe0, 0xf3, 0xc5, 0x56, 0xf2, 0x12, 0x07, 0xd9, 0xa6, 0xad,
	0x0a, 0x7c, 0xa3, 0x30, 0xf2, 0x1a, 0x1e, 0x1f, 0x91, 0x8c, 0x51, 0xee, 0x9a, 0x44, 0x95, 0xf0,
	0x15, 0x34, 0x4a, 0xb6, 0xca, 0x33, 0x8e, 0x63, 0xec, 0x5d, 0x75, 0x86, 0x95, 0x12, 0x33, 0x44,
	0x69, 0x15, 0x55, 0xdd, 0xeb, 0x95, 0x31, 0xcc, 0xae, 0x46, 0x54, 0x9a, 0xef, 0xc0, 0xdf, 0xe4,
	0x09, 0x93, 0x7c, 0x2e, 0xd3, 0x15, 0x2f, 0x25, 0x5b, 0xe5, 0x81, 0x8b, 0xad, 0x75, 0x35, 0x1e,
	0xef, 0x60, 0xf2, 0x03, 0xf4, 0x1e, 0x52, 0x8d, 0x09, 0x27, 0x0f, 0xe8, 0x95, 0x0b, 0xaa, 0x37,
	0x99, 0xdf, 0x8b, 0x62, 0xc5, 0x64, 0xe0, 0x69, 0x17, 0x54, 0xd0, 0x5b, 0x44, 0x94, 0x0b, 0x1a,
	0x04, 0xcc, 0xd6, 0xd2, 0x2e, 0x78, 0x20, 0x9d, 0x30, 0xae, 0xf6, 0x59, 0xc6, 0xd5, 0x39, 0x69,
	0x5c, 0x0f, 0x9c, 0xb9, 0x7b, 0x8e, 0x33, 0xfb, 0xe7, 0x38, 0xf3, 0xe3, 0xf3, 0x9c, 0x99, 0x9c,
	0x74, 0x66, 0xc3, 0x4e, 0x9f, 0xf4, 0xed, 0x41, 0xeb, 0xb3, 0x76, 0xda, 0x7b, 0x68, 0xa7, 0x07,
	0x6b, 0x79, 0xfa, 0x59, 0x6b, 0xf9, 0xea, 0xd8, 0x5a, 0xc2, 0x2d, 0xb4, 0x8f, 0x3e, 0x16, 0xf2,
	0x3d, 0x34, 0xaa, 0x37, 0xb2, 0x70, 0x1c, 0x9f, 0x1e, 0x7f, 0x4c, 0xc3, 0xb7, 0x53, 0x7a, 0x77,
	0x1d, 0xd3, 0x8a, 0x44, 0x08, 0xd4, 0x16, 0x22, 0xd9, 0xe2, 0xbc, 0xb8, 0x14, 0xd7, 0xe1, 0x37,
	0xd0, 0xd0, 0x2c, 0x35, 0xac, 0x71, 0xf4, 0x6b, 0xec, 0x3f, 0x22, 0x4d, 0xb0, 0xe3, 0xd9, 0x7b,
	0xdf, 0x52, 0xd0, 0x78, 0x36, 0x9d, 0xf8, 0x17, 0xaf, 0xef, 0xa0, 0xa1, 0x3d, 0x13, 0x67, 0x7a,
	0x3a, 0x89, 0xaa, 0x99, 0xbe, 0x8e, 0xaf, 0x67, 0x51, 0xec, 0x5b, 0xea, 0xcc, 0x78, 0xfa, 0xc6,
	0xbf, 0x50, 0xe8, 0x2c, 0xa2, 0xef, 0x47, 0x37, 0x91, 0x6f, 0x13, 0x17, 0xea, 0x77, 0xd3, 0xdb,
	0xe8, 0x27, 0xbf, 0xa6, 0xf0, 0x77, 0x74, 0x3a, 0x8e, 0x6e, 0x62, 0xbf, 0xbe, 0x68, 0xe0, 0x1f,
	0xc5, 0x8f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x45, 0x72, 0x40, 0xc3, 0x5d, 0x08, 0x00, 0x00,
}
